{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Pytest Cookbook - recipes with videos and repos","text":""},{"location":"#purpose_of_this_book","title":"Purpose of this book","text":"<p>To provide a range of ready built and congfigurable FULL STACK PYTHON TEST FRAMEWORK, comprising of over 180 test templates and references for developers to adapt to their own needs.</p> <p>Installation will require just a 1-2-3 of:</p> <ol> <li>'python -m venv venv` to create virtual environment.</li> <li><code>pip install -r requirements.txt</code>.</li> <li><code>playwright install</code> to load Playwright browsers.</li> </ol> <p>We use a number of hooks for utilities and featues.</p> <p>One of these is customising the terminal report and one can configure the output in a number of ways, explained in articles and videos.</p> <p>Here is a sample output:</p>"},{"location":"#header_sections","title":"header sections","text":""},{"location":"#customised_words_for_passed_etc_as_well_as_adding_icons_and_format_word_colour","title":"customised words for passed etc as well as adding icons and format word colour","text":""},{"location":"#add_sections_to_end_of_pytest_output","title":"add sections to end of PyTest output","text":"<p>The frameworks have logging and other utilities installed to provide a complete framework.</p> <p>Resources included are:</p> <ol> <li>Links to helpful articles, videos and documentation. Converted and transcribed code of great YT videos where there is no code.</li> </ol>"},{"location":"#test_frameworks","title":"Test frameworks","text":"<p>See the README.md in root of each Test framework for detailed and up to date set up instructions.</p> <p>These two main test frameworks:</p> <ul> <li>PyTest_01_Full - a full stack testing framework from SQL Schemas to E2E testing with Playwright</li> <li>PyTest_02_DJANGO - is its own unique testing framework built from a range of sources. </li> </ul> <p>I strive to acknowledge sources I have used to learn PyTest and any adaptations of code samples used therein.</p> <p>As a curated list of resources, I have integrity over linking to the work of others and due credits are given.</p> <p>Often I am a wrapper around someone else's effort and I try to add a different presentation whre possible as we each find our understanding with a different presentation of the subject. Hence having may teachers enables us all as eternal students to get our heads around sometimes very complex subjects.</p>"},{"location":"#about_me","title":"About me","text":"<p>I am a Python Test Engineer using PyTest and Playwright as well as a Software Tester.</p> <p>I enjoy building Plugins and I an developing a PyTest Hooks and Plugin online video course that teaches how to create lite versions of some well known plugins as well as our own useful custom plugins which can be made distributabe:</p> <p>Example plugins are:</p> <ul> <li>CSV Lite Reporter</li> <li>Export results to DB</li> <li>Sorting, randomizing and deselecting tests</li> </ul> <p>The course is available Udemy Hooks and Plugins course and Udemy has a sale ever two weeks and the cost would be $20USD approx.</p> <p></p> <p>There is more information about me and my services here.</p>"},{"location":"#how_best_to_use_this_book","title":"How best to use this book","text":"<p>Download or git clone from repo and cd into the desired test framework.</p> <p>Each test framework has a README.md and there are more details and information there as necessary. For the API and Playwright test framework, you will neeed to run <code>playwright install</code> after Playwright is installed to load all the browsers.</p> <p>For prettier general console output, Rich and PyBoxen, built on Rich, are used as well as pytest-sugar for the test results. file of test framework.</p>"},{"location":"#youtube_videos","title":"YouTube Videos","text":"<p>I have made some videos to assist in using this book.</p> <p>These are available here.</p>"},{"location":"api/","title":"References","text":""},{"location":"api_testing/api/","title":"PyTest_02_API_PLAYWRIGHT","text":""},{"location":"api_testing/api/#about","title":"About","text":"<p>This is part of PyTest_02_API_PLAYWRIGHT which you may have installed already for Playwright testing.</p> <p>It combines the use of Playwright for API testing as well as e2e/end user testing.</p>"},{"location":"api_testing/api/#install","title":"Install","text":"<ul> <li>move to <code>PyTest_02_API_PLAYWRIGHT</code> </li> <li>create virtual environment as you wish</li> <li>run <code>pip install requirements_02.txt</code></li> <li>run <code>playwright install</code> to load in browsers. IMPORTANT.</li> </ul>"},{"location":"api_testing/api/#run_tests","title":"Run Tests","text":"<ul> <li>run <code>python -m pytest -vs</code></li> </ul>"},{"location":"api_testing/testing_playgrounds/","title":"Testing Playgrounds","text":"<ul> <li>AutomationStore</li> </ul>"},{"location":"articles/","title":"Blog","text":""},{"location":"articles/mocking/","title":"Mocking","text":"<p>https://medium.com/@cini01/how-to-patch-the-monkey-right-243898b6715a</p> <p>https://pytest-with-eric.com/mocking/pytest-mocking/#Mock-AWS-Services-%E2%80%94-E-g-S3</p>"},{"location":"blog/","title":"Blog","text":"<p>Landing page</p>"},{"location":"blog/2025/12/03/fosdem25/","title":"FOSDEM'25","text":"<p>https://changhsinlee.com/pytest-mock/</p> <p>https://medium.com/@cini01/how-to-patch-the-monkey-right-243898b6715a</p> <p>https://pytest-with-eric.com/mocking/pytest-mocking/#Mock-AWS-Services-%E2%80%94-E-g-S3</p>"},{"location":"blog/2024/02/03/fosdem24/","title":"FOSDEM'24","text":""},{"location":"blog/2024/02/03/fosdem24/#location","title":"Location","text":"<p>https://github.com/Python-Test-Engineer/PYTHON-TEST-FRAMEWORK</p>"},{"location":"blog/2024/02/03/fosdem24/#purpose","title":"Purpose","text":"<p>DB integrity</p> <p>Test existence and integrity of tables, foreign keys, constraints etc.</p>"},{"location":"blog/2024/02/03/fosdem24/#uses","title":"Uses","text":"<ul> <li>SQL Model</li> <li>SQLModel's <code>inspect</code> feature.</li> </ul>"},{"location":"blog/2024/02/03/fosdem24/#information","title":"Information","text":"<p>SQLModel is a library for interacting with SQL databases from Python code, with Python objects. It is designed to be intuitive, easy to use, highly compatible, and robust.</p> <p>SQLModel is based on Python type annotations, and powered by Pydantic and SQLAlchemy. https://sqlmodel.tiangolo.com/</p> <p>We can get metadata on tables/views to check:</p> <ul> <li>Check tables and views exist.</li> <li>Check foreign keys, defaults, unique constraints, nullability and more.</li> <li>And more...</li> </ul> <p>We will work with an SQLite example but the SQLModel engine feature enables the same code to be used on a variety of databases.</p>"},{"location":"blog/2024/02/03/fosdem24/#youtube","title":"YouTube","text":"<p>https://youtu.be/vcRB_pg__AQ</p>"},{"location":"ci_integration/ci_github/","title":"CI Integration","text":"<p>One way to test one's code on many versions of python and operating systems is to use GitHub actions.</p> <p>We can use a GitHyb workflow using <code>.github/workflows/some_actions.yaml</code> in our project.</p> <p>In TEST_04_CI, we use a file called ci_test.yaml but it can be any named yaml file.</p> <p>This suite uses the TEST__00_MINIMAL with some project packages removed.</p> <p>One can see that running this just on windows in the GitHub actions, highlights and error on Python 3.6.</p> <p></p> <p>We can extend to use Ubuntu and MacOS.</p> <p>This is an adaptation of Carberra</p> <p>Installation tips:</p> <p>I would suggest extracting the TEST_04_CI folder to its own location and set up a new repository so that once can test these github actions. </p> <ul> <li>create new CI_TEST repo for example.</li> <li>copy folder to its own location so that one can do <code>git init</code> etc and then connect to the CI_TEST repo.</li> <li>once you push up code to repo, the GitHub actions will start as the yaml file has </li> </ul> <pre><code>on:\n   push:\n      branches: [ main ]\n</code></pre>"},{"location":"ci_integration/tox/","title":"Tox","text":""},{"location":"ci_integration/tox/#todo","title":"TODO","text":""},{"location":"craig/","title":"Index","text":""},{"location":"craig/#craig_west_-_python_test_engineer","title":"Craig West - Python Test Engineer","text":"<ul> <li>Degree in Chemistry, Oxford University.</li> <li>Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA.</li> <li>Former Business Information Architect.</li> <li>Qualified Accountant Technician and business owner.</li> <li>Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker</li> <li>Talks and workshops given at WordCamps, MeetUps and NDC.</li> </ul>"},{"location":"craig/#connect_with_me","title":"Connect with me","text":"<ul> <li>\ud83c\udf10 https://python-test-engineer.netlify.app/</li> <li>\ud83d\udceb mrcraigwest@hotmail.com</li> <li>\ud83d\udda5\ufe0f https://www.youtube.com/@iwswordpress/featured</li> </ul>"},{"location":"craig/#python_test_framework","title":"Python Test Framework","text":"<p>I am developing a collated resource for Python Testing along with a range of test Suites with 'one click' set up. https://github.com/iwswordpress/generic-pytest-playwright-pytest-bdd-framework</p>"},{"location":"craig/#talks_and_workshops","title":"Talks and Workshops","text":"<p>A list of talks and workshops I have given:</p> <ul> <li> <p>TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021.</p> </li> <li> <p>LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021.</p> </li> <li> <p>TALK: WP REST API and Web Components =&gt; 100% Internet - WordCamp Santa Clarita, July 2021.</p> </li> <li> <p>TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021.</p> </li> <li> <p>TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021.</p> </li> <li> <p>WORKSHOP: WP REST API and you -&gt; Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021.</p> </li> <li> <p>TALK: Web Components as Micro Apps - NDC London, Jan 2021</p> </li> <li> <p>TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020.</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC.</p> </li> <li> <p>WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC.</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020.</p> </li> <li> <p>TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns.</p> </li> <li> <p>TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API - WordCamp Vienna February 2020.</p> </li> <li> <p>TALK: Progressive Web Apps - Brighton WordUp November 2019.</p> </li> <li> <p>TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019.</p> </li> <li> <p>TALK: JWT and Authentication - WPHooked London September 2019</p> </li> <li> <p>TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019.</p> </li> </ul>"},{"location":"craig/#published_udemy_courses","title":"Published Udemy Courses","text":"<p>Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD.</p> <p>These have now been retired.</p> <ul> <li>WordPress REST API and AJAX Forms/Pages - DEMO (paid)</li> <li>Progressive Web Apps - DEMO (paid).</li> <li>WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - DEMO (free).</li> <li>Stylish Dynamic Web Forms with jQuery validation - DEMO (free).</li> </ul>"},{"location":"craig/#youtube_courses_-_developer_to_developer_courses","title":"YouTube Courses - Developer to Developer courses","text":"<p>These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others.</p> <p>There are also some specific videos explaining solutions to set ups other developers may encounter.</p> <ul> <li> <p>HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - DEMO.</p> </li> <li> <p>WP Plugin Boilerplate:  I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent - DEMO.</p> </li> <li>WP Plugin Boilerplate:  I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent - DEMO.</li> </ul>"},{"location":"craig/#volounteering","title":"Volounteering","text":"<p>I volounteer at Codebar.io in Brighton.</p>"},{"location":"craig/#outside_interests","title":"Outside interests","text":"<p>These include Community Kitchens, gym, occasional partner dancing and DIY.</p>"},{"location":"craig/contact/","title":"Contact me","text":""},{"location":"craig/contact/#email","title":"Email","text":"<p>You can contact me at this email: iwswordpress@gmail.com</p>"},{"location":"craig/courses/","title":"Online courses","text":""},{"location":"craig/courses/#udemycom","title":"Udemy.com","text":"<p>The course is available Udemy Hooks and Plugins course and Udemy has a sale ever two weeks and the cost would be $20USD approx.</p> <p></p>"},{"location":"craig/craig/","title":"Craig","text":"<ul> <li> <p>PythonTestEngineer.co.uk</p> </li> <li> <p>Github CV</p> </li> <li> <p>Github Repo</p> </li> </ul> <p></p> Python Test Engineer - particulalry Django"},{"location":"craig/craig/#python_test_engineer","title":"Python Test Engineer","text":"<ul> <li>Degree in Chemistry, Oxford University.</li> <li>Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA.</li> <li>Former Business Information Architect.</li> <li>Qualified Accountant Technician and business owner.</li> <li>Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker</li> <li>Talks and workshops given at WordCamps, MeetUps and NDC.</li> </ul>"},{"location":"craig/craig/#talks_and_workshops","title":"Talks and Workshops","text":"<p>A list of talks and workshops I have given: </p> <ul> <li> <p>TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021.</p> </li> <li> <p>LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021.</p> </li> <li> <p>TALK: WP REST API and Web Components =&gt; 100% Internet - WordCamp Santa Clarita, July 2021.</p> </li> <li> <p>TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021.</p> </li> <li> <p>TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021</p> </li> <li> <p>WORKSHOP: WP REST API and you -&gt; Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021 </p> </li> <li> <p>TALK: Web Components as Micro Apps - NDC London, Jan 2021</p> </li> <li> <p>TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC</p> </li> <li> <p>WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020.</p> </li> <li> <p>TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns </p> </li> <li> <p>TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API - WordCamp Vienna February 2020.</p> </li> <li> <p>TALK: Progressive Web Apps - Brighton WordUp November 2019.</p> </li> <li> <p>TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019.</p> </li> <li> <p>TALK: JWT and Authentication - WPHooked London September 2019</p> </li> <li> <p>TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019.</p> </li> </ul>"},{"location":"craig/craig/#published_udemy_courses","title":"Published Udemy Courses","text":"<p>Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD.</p> <p>These have now been retired.</p> <ul> <li>WordPress REST API and AJAX Forms/Pages - DEMO https://www.youtube.com/watch?v=eubhbcGH_Ws&amp;t=6s (paid)</li> <li>Progressive Web Apps - DEMO https://www.youtube.com/watch?v=k_lHvNL0gkw (paid)</li> <li>WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - https://www.udemy.com/course/powerful-html-pages-using-wordpress-component-architecture/ (free)</li> <li>Stylish Dynamic Web Forms with jQuery validation - https://www.udemy.com/course/ready-to-use-form-validation-templates-with-jquery/ (free)</li> </ul>"},{"location":"craig/craig/#youtube_courses_-_developer_to_developer_courses","title":"YouTube Courses - Developer to Developer courses","text":"<p>These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others.</p> <p>There are also some specific videos explaining solutions to set ups other developers may encounter.</p> <ul> <li> <p>HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - https://www.youtube.com/watch?v=QC-JTqQTv2k&amp;list=PLsszRSbzjyvkQwzrJobroRl7z7MfSlePa </p> </li> <li> <p>WP Plugin Boilerplate:  I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent. https://www.youtube.com/watch?v=lJ9ktD4JOfs&amp;list=PLsszRSbzjyvn-RQr4dEjrgnTne2HcJKee</p> </li> </ul>"},{"location":"craig/craig/#volounteering","title":"Volounteering","text":"<p>I volounteer at Codebar.io in Brighton as well as some Community Kitchens.</p>"},{"location":"craig/craig/#outside_interests","title":"Outside interests","text":"<p>These include Community Kitchens, gym, occasional partner dancing and DIY.</p>"},{"location":"craig/cv/","title":"CV","text":"<ul> <li> <p>PythonTestEngineer.co.uk</p> </li> <li> <p>Github CV</p> </li> <li> <p>Github Repo</p> </li> </ul> <p></p> Python Test Engineer - particulalry Django"},{"location":"craig/cv/#python_test_engineer","title":"Python Test Engineer","text":"<ul> <li>Degree in Chemistry, Oxford University.</li> <li>Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA.</li> <li>Former Business Information Architect.</li> <li>Qualified Accountant Technician and business owner.</li> <li>Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker</li> <li>Talks and workshops given at WordCamps, MeetUps and NDC.</li> </ul>"},{"location":"craig/cv/#talks_and_workshops","title":"Talks and Workshops","text":"<p>A list of talks and workshops I have given: </p> <ul> <li> <p>TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021.</p> </li> <li> <p>LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021.</p> </li> <li> <p>TALK: WP REST API and Web Components =&gt; 100% Internet - WordCamp Santa Clarita, July 2021.</p> </li> <li> <p>TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021.</p> </li> <li> <p>TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021</p> </li> <li> <p>WORKSHOP: WP REST API and you -&gt; Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021 </p> </li> <li> <p>TALK: Web Components as Micro Apps - NDC London, Jan 2021</p> </li> <li> <p>TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC</p> </li> <li> <p>WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020.</p> </li> <li> <p>TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns </p> </li> <li> <p>TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API - WordCamp Vienna February 2020.</p> </li> <li> <p>TALK: Progressive Web Apps - Brighton WordUp November 2019.</p> </li> <li> <p>TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019.</p> </li> <li> <p>TALK: JWT and Authentication - WPHooked London September 2019</p> </li> <li> <p>TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019.</p> </li> </ul>"},{"location":"craig/cv/#published_udemy_courses","title":"Published Udemy Courses","text":"<p>Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD.</p> <p>These have now been retired.</p> <ul> <li>WordPress REST API and AJAX Forms/Pages - DEMO https://www.youtube.com/watch?v=eubhbcGH_Ws&amp;t=6s (paid)</li> <li>Progressive Web Apps - DEMO https://www.youtube.com/watch?v=k_lHvNL0gkw (paid)</li> <li>WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - https://www.udemy.com/course/powerful-html-pages-using-wordpress-component-architecture/ (free)</li> <li>Stylish Dynamic Web Forms with jQuery validation - https://www.udemy.com/course/ready-to-use-form-validation-templates-with-jquery/ (free)</li> </ul>"},{"location":"craig/cv/#youtube_courses_-_developer_to_developer_courses","title":"YouTube Courses - Developer to Developer courses","text":"<p>These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others.</p> <p>There are also some specific videos explaining solutions to set ups other developers may encounter.</p> <ul> <li> <p>HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - https://www.youtube.com/watch?v=QC-JTqQTv2k&amp;list=PLsszRSbzjyvkQwzrJobroRl7z7MfSlePa </p> </li> <li> <p>WP Plugin Boilerplate:  I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent. https://www.youtube.com/watch?v=lJ9ktD4JOfs&amp;list=PLsszRSbzjyvn-RQr4dEjrgnTne2HcJKee</p> </li> </ul>"},{"location":"craig/cv/#volounteering","title":"Volounteering","text":"<p>I volounteer at Codebar.io in Brighton as well as some Community Kitchens.</p>"},{"location":"craig/cv/#outside_interests","title":"Outside interests","text":"<p>These include Community Kitchens, gym, occasional partner dancing and DIY.</p>"},{"location":"craig/services/","title":"Services provided","text":""},{"location":"craig/services/#services","title":"Services","text":""},{"location":"craig/services/#testing","title":"Testing","text":""},{"location":"craig/services/#django","title":"Django","text":""},{"location":"craig/services/#engagement_style","title":"Engagement Style","text":""},{"location":"craig/services/#hybrid","title":"Hybrid","text":""},{"location":"db_testing/testing/","title":"Database structural testing","text":""},{"location":"db_testing/testing/#location","title":"Location","text":"<p>https://github.com/Python-Test-Engineer/PYTHON-TEST-FRAMEWORK</p>"},{"location":"db_testing/testing/#purpose","title":"Purpose","text":"<p>DB integrity</p> <p>Test existence and integrity of tables, foreign keys, constraints etc.</p>"},{"location":"db_testing/testing/#uses","title":"Uses","text":"<ul> <li>SQL Model</li> <li>SQLModel's <code>inspect</code> feature.</li> </ul>"},{"location":"db_testing/testing/#information","title":"Information","text":"<p>SQLModel is a library for interacting with SQL databases from Python code, with Python objects. It is designed to be intuitive, easy to use, highly compatible, and robust.</p> <p>SQLModel is based on Python type annotations, and powered by Pydantic and SQLAlchemy. https://sqlmodel.tiangolo.com/</p> <p>We can get metadata on tables/views to check:</p> <ul> <li>Check tables and views exist.</li> <li>Check foreign keys, defaults, unique constraints, nullability and more.</li> <li>And more...</li> </ul> <p>We will work with an SQLite example but the SQLModel engine feature enables the same code to be used on a variety of databases.</p>"},{"location":"db_testing/testing/#youtube","title":"YouTube","text":"<p>https://youtu.be/vcRB_pg__AQ</p>"},{"location":"django_testing/","title":"Django tesing","text":"<p>REPO</p>"},{"location":"django_testing/apps/","title":"Apps","text":"<p>A compilation of various soruces in one project.</p>"},{"location":"django_testing/apps/#accountsposts","title":"accounts/posts","text":"<p>Based on a TDD video series of Django by Ssali Jonathan, I have extended it to include a PyTest folder as well as additional Django Unit Tests.</p> <p>Based on an ORM Deep Dive series by BugBytes, the code for the 18+ videos was not included in the repo so I have added files for each of the videos. I have also included some of my own ORM scripts as well as others from  Very Academy.</p> <p>It uses django-extensions, django-extensions, which offers the ability to run <code>manage.py runscript &lt;file_name_but_not_py_extension&gt;</code>, as if in a shell.</p> <p>Custom Commands to load data, SQL queries, transactions are also included and I have extended the code to include other useful utilities, as well as some relevant tests.</p> <p>I have added dditional tests from the Django Docs are also included.</p>"},{"location":"django_testing/apps/#ecommerce","title":"ecommerce","text":"<p>Tom Dekan tests - blog and video link https://www.photondesigner.com/articles/unit-tests-factory-boy-faker?ref=yt-unit-tests-factory-boy-faker</p>"},{"location":"django_testing/apps/#filemanager","title":"filemanager","text":"<p>A small app concerned with file uploading and management, this offers some more examples of testing with UnitTest and PyTest.</p>"},{"location":"django_testing/index_django/","title":"Django","text":""},{"location":"django_testing/index_django/#about","title":"About","text":"<p>This has a large selection of tests, many linked to video series.</p>"},{"location":"django_testing/index_django/#todo","title":"TODO","text":"<p>https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django</p> <p>https://github.com/elena/example-tests-django-hypothesis</p> <p>pytest-django</p> <p>bugbytes - middleware and pytest-django:  - https://www.youtube.com/watch?v=TTEEr4N-lKw  - https://www.youtube.com/watch?v=pdatgYDXmSE</p>"},{"location":"django_testing/setup/","title":"Setup","text":""},{"location":"django_testing/setup/#instructions","title":"Instructions","text":"<ul> <li> <p>cd REPO.</p> </li> <li> <p>creater virtual env <code>python -m venv venv</code>.</p> </li> <li>pip install -r requirents.txt</li> <li>run <code>playwright install</code> to load in playwright browsers.</li> <li>in one terminal run <code>python manage.py runserver</code>.</li> <li>For unittests run <code>python manage.py test</code></li> <li>in another run <code>python -m pytest -v</code> or <code>python -m pytest -v --headed</code> if using  playwright and you want to see browsers. Sometimes this may not work so you will need to add the headless=False to the test.</li> <li>DB has had migrations. superuser: admin password</li> <li>super user is <code>admin</code> and <code>password</code>.</li> <li>pytest-sugar added for fancier terminal output</li> <li>Rich and PyBoxen used for fancy console output. Examples are in the orm app.</li> <li>django-extensions used in orm app so that we can run scripts in a py file rather than in shell. See <code>orm/_NOTES.md</code> for more details - TODO</li> </ul>"},{"location":"django_testing/setup/#alternative","title":"Alternative","text":"<p>If one is not using requirements.txt one would need to install:</p> <ul> <li>django</li> <li>django-extensions for the utuilities used in orm.</li> <li>pytest, pytest-django, pytest-cov.</li> <li>playwright for browser based testing (an then run <code>playrwight install</code> to load browsers).</li> <li>pytest-sugar for nicer output format of tests.</li> <li>pyboxen for fancy console output used in orm.</li> <li>requests for order app.</li> </ul>"},{"location":"django_testing/setup/#references","title":"References","text":"<ul> <li> <p>Pybites - https://www.youtube.com/watch?v=L5jWFU2sVXQ for help with setting up PyTest tests for Django. </p> </li> <li> <p>Ssali Jonathan - https://www.youtube.com/watch?v=Nn3Yjea5KCI&amp;list=PLEt8Tae2spYlVZUBBEE9PtX-NXk_hw7o4 for the TDD approach to building the <code>posts</code> app. This gives a basis for many good tests. I have transported a few for demonstation purposes in <code>pytest_tests</code>. (PyTest searches for all test files with test_ or whatever is specified in the pytest.ini file in root).</p> </li> </ul>"},{"location":"django_testing/setup/#todos","title":"Todos","text":"<p>These will use their own individual app to showcase them.</p> <ul> <li> <p>DjangoStars - https://djangostars.com/blog/django-pytest-testing/</p> </li> <li> <p>https://pytest-with-eric.com/pytest-advanced/pytest-django-restapi-testing/#Conftest-and-Setup</p> </li> <li> <p>https://dev.to/sherlockcodes/pytest-with-django-rest-framework-from-zero-to-hero-8c4</p> </li> </ul>"},{"location":"django_testing/tests/","title":"Tests","text":"<p>These are located within each app under the tests folder. The standard <code>test.py</code> is best deleted otherwise the test runner can get confused and tests won't run.</p> <p>Running <code>python manage.py test</code> will run all the tests. <code>python -m pytest</code> will also run these tests plus any other tests in root tests folder. For clarification, I have called this folder <code>pytest-tests</code>. PyTest searches the whole project for test files.</p>"},{"location":"how_do_i/","title":"How do I ...?","text":""},{"location":"how_do_i/#ignore_tests","title":"Ignore tests?","text":""},{"location":"how_do_i/#how_do_i_1","title":"How do I","text":""},{"location":"how_do_i/#how_do_i_2","title":"How do I","text":""},{"location":"how_do_i/#how_do_i_3","title":"How do I","text":""},{"location":"how_do_i/#how_do_i_4","title":"How do I","text":""},{"location":"how_do_i/#how_do_i_5","title":"How do I","text":""},{"location":"how_do_i/#how_do_i_6","title":"How do I","text":""},{"location":"how_do_i/#how_do_i_7","title":"How do I","text":""},{"location":"how_do_i/#how_do_i_8","title":"How do I","text":""},{"location":"how_do_i/topic01/","title":"Topic 01","text":""},{"location":"how_do_i/topic01/#ignore_tests","title":"Ignore tests?","text":""},{"location":"how_do_i/topic01/#how_do_i","title":"How do I","text":""},{"location":"how_do_i/topic01/#how_do_i_1","title":"How do I","text":""},{"location":"how_do_i/topic01/#how_do_i_2","title":"How do I","text":""},{"location":"how_do_i/topic01/#how_do_i_3","title":"How do I","text":""},{"location":"how_do_i/topic01/#how_do_i_4","title":"How do I","text":""},{"location":"how_do_i/topic01/#how_do_i_5","title":"How do I","text":""},{"location":"how_do_i/topic01/#how_do_i_6","title":"How do I","text":""},{"location":"how_do_i/topic01/#how_do_i_7","title":"How do I","text":""},{"location":"how_do_i/topic02/","title":"Topic 02","text":""},{"location":"how_do_i/topic02/#ignore_tests","title":"Ignore tests?","text":""},{"location":"how_do_i/topic02/#how_do_i","title":"How do I","text":""},{"location":"how_do_i/topic02/#how_do_i_1","title":"How do I","text":""},{"location":"how_do_i/topic02/#how_do_i_2","title":"How do I","text":""},{"location":"how_do_i/topic02/#how_do_i_3","title":"How do I","text":""},{"location":"how_do_i/topic02/#how_do_i_4","title":"How do I","text":""},{"location":"how_do_i/topic02/#how_do_i_5","title":"How do I","text":""},{"location":"how_do_i/topic02/#how_do_i_6","title":"How do I","text":""},{"location":"how_do_i/topic02/#how_do_i_7","title":"How do I","text":""},{"location":"hypothesis/","title":"Index","text":"<p>Best examle: Pytest-with-Eric is  a very good resource. It is included in PyTest_06_HYPOTHESIS.</p> <p>When writing unit tests, it\u2019s hard to consider all possible edge cases and validate that your code works correctly.</p> <p>This is sometimes caught in production and a quick and speedy patch needs to be deployed. Only for a new bug to emerge later.</p> <p>There will always be cases you didn\u2019t consider, making this an ongoing maintenance job. Unit testing solves only some of these issues.</p> <p>Property-based testing is a complementary approach to traditional unit testing, where test cases are generated based on properties or constriants that the code should satisfy.</p> <p>Hypothesis addresses this limitation by automatically generating test data based on specified strategies.</p> <p>This allows developers to test a much broader range of inputs and outputs than traditional unit tests, increasing the likelihood of catching edge cases and unexpected behaviour.</p> <p>https://github.com/elena/example-tests-django-hypothesis</p> <p>https://www.drmaciver.com/2015/06/hypothesis-for-django/</p> <p>https://www.agiliq.com/blog/2019/01/hypothesis-in-drf/</p> <p>https://www.youtube.com/watch?v=7It3sIrTAVo</p> <p>https://www.slideshare.net/slideshow/hypothesis-randomised-testing-for-django/58357011</p> <p>https://github.com/HypothesisWorks/hypothesis/blob/master/hypothesis-python/examples/test_basic.py</p> <p>Hypothesis PyPi</p>"},{"location":"hypothesis/hypothesis/","title":"Hypothesis","text":"<p>When writing unit tests, it\u2019s hard to consider all possible edge cases and validate that your code works correctly.</p> <p>This is sometimes caught in production and a quick and speedy patch needs to be deployed. Only for a new bug to emerge later.</p> <p>There will always be cases you didn\u2019t consider, making this an ongoing maintenance job. Unit testing solves only some of these issues.</p> <p>Property-based testing is a complementary approach to traditional unit testing, where test cases are generated based on properties or constriants that the code should satisfy.</p> <p>Hypothesis addresses this limitation by automatically generating test data based on specified strategies.</p> <p>This allows developers to test a much broader range of inputs and outputs than traditional unit tests, increasing the likelihood of catching edge cases and unexpected behaviour.</p> <p>https://github.com/elena/example-tests-django-hypothesis</p> <p>https://www.drmaciver.com/2015/06/hypothesis-for-django/</p> <p>https://www.agiliq.com/blog/2019/01/hypothesis-in-drf/</p> <p>https://www.youtube.com/watch?v=7It3sIrTAVo</p> <p>https://www.slideshare.net/slideshow/hypothesis-randomised-testing-for-django/58357011</p> <p>https://github.com/HypothesisWorks/hypothesis/blob/master/hypothesis-python/examples/test_basic.py</p> <p>Hypothesis PyPi</p> <p>Pytest-with-Eric is  a very good resource.</p>"},{"location":"hypothesis/syntax_highlighting_demo/","title":"Syntax highlighting demo","text":"<p>Hypothesis Testing</p>"},{"location":"hypothesis/syntax_highlighting_demo/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"hypothesis/syntax_highlighting_demo/#bash","title":"Bash","text":"<pre><code># Minimal makefile for Sphinx documentation\n#\n\n# You can set these variables from the command line, and also\n# from the environment for the first two.\nSPHINXOPTS    ?=\nSPHINXBUILD   ?= sphinx-build\nSOURCEDIR     = source\nBUILDDIR      = build\n\n# Put it first so that \"make\" without argument is like \"make help\".\nhelp:\n    @$(SPHINXBUILD) -M help \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O)\n\n.PHONY: help Makefile\n\n# Catch-all target: route all unknown targets to Sphinx using the new\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n%: Makefile\n    @$(SPHINXBUILD) -M $@ \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O)\n</code></pre>"},{"location":"hypothesis/syntax_highlighting_demo/#syntax_highlighting_example","title":"Syntax highlighting Example","text":"<pre><code>import flask\nimport flask_saml\n\napp = flask.Flask(__name__)\n\napp.config.update({\n    'SECRET_KEY': 'soverysecret',\n    'SAML_METADATA_URL': 'https://mymetadata.xml',\n})\nflask_saml.FlaskSAML(app)\n</code></pre>"},{"location":"hypothesis/syntax_highlighting_demo/#sample_layout","title":"Sample layout","text":"<pre><code>\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 about.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n\u2514\u2500\u2500 site\n    \u251c\u2500\u2500 404.html\n    \u251c\u2500\u2500 about\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 search_index.json\n    \u251c\u2500\u2500 sitemap.xml\n    \u2514\u2500\u2500 sitemap.xml.gz\n</code></pre>"},{"location":"playwright_api/Xindex/","title":"Playwright Testing","text":""},{"location":"playwright_api/Xindex/#about","title":"About","text":"<p>Playwright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation.</p> <p>Playwright recommends using the official Playwright Pytest plugin to write end-to-end tests. It provides context isolation, running it on multiple browser configurations out of the box. Alternatively you can use the library to manually write the testing infrastructure with your preferred test-runner. The Pytest plugin utilizes the sync version of Playwright, there is also an async version accessible via the library.</p> <p>Playwright - Python</p>"},{"location":"playwright_api/Xindex/#install","title":"Install","text":"<ul> <li>move to <code>PyTest_02_API_PLAYWRIGHT</code> </li> <li>create virtual environment as you wish</li> <li>run <code>pip install requirements_02.txt</code></li> <li>run <code>playwright install</code> to load in browsers. IMPORTANT.</li> </ul>"},{"location":"playwright_api/Xindex/#run_tests","title":"Run Tests","text":"<ul> <li>run <code>python -m pytest -vs</code></li> </ul>"},{"location":"playwright_api/Xplaywright/","title":"Playwright Testing","text":""},{"location":"playwright_api/Xplaywright/#about","title":"About","text":"<p>Playwright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation.</p> <p>Playwright recommends using the official Playwright Pytest plugin to write end-to-end tests. It provides context isolation, running it on multiple browser configurations out of the box. Alternatively you can use the library to manually write the testing infrastructure with your preferred test-runner. The Pytest plugin utilizes the sync version of Playwright, there is also an async version accessible via the library.</p> <p>Playwright - Python</p>"},{"location":"playwright_api/Xplaywright/#install","title":"Install","text":"<ul> <li>move to <code>TEST_SUITE_02_API_PLAYWRIGHT</code> </li> <li>create virtual environment as you wish</li> <li>run <code>pip install requirements_02.txt</code></li> <li>run <code>playwright install</code> to load in browsers. IMPORTANT.</li> </ul>"},{"location":"playwright_api/Xplaywright/#run_tests","title":"Run Tests","text":"<ul> <li>run <code>python -m pytest -vs</code></li> </ul>"},{"location":"playwright_api/api/","title":"Playwright Testing","text":""},{"location":"playwright_api/api/#about","title":"About","text":"<p>Playwright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation.</p> <p>Playwright recommends using the official Playwright Pytest plugin to write end-to-end tests. It provides context isolation, running it on multiple browser configurations out of the box. Alternatively you can use the library to manually write the testing infrastructure with your preferred test-runner. The Pytest plugin utilizes the sync version of Playwright, there is also an async version accessible via the library.</p> <p>Playwright - Python</p>"},{"location":"playwright_api/api/#repo","title":"Repo","text":"<p>PyTest_02_API_PLAYWRIGHT</p>"},{"location":"playwright_api/api/#install","title":"Install","text":"<ul> <li>move to <code>PyTest_02_API_PLAYWRIGHT</code> </li> <li>create virtual environment as you wish</li> <li>run <code>pip install requirements_02.txt</code></li> <li>run <code>playwright install</code> to load in browsers. IMPORTANT.</li> </ul>"},{"location":"playwright_api/api/#run_tests","title":"Run Tests","text":"<ul> <li>run <code>python -m pytest -vs</code></li> </ul>"},{"location":"playwright_api/api/#youtube","title":"YouTube","text":"<p>API_PLAYWRIGHT</p>"},{"location":"playwright_api/testing_playgrounds/","title":"Testing Playgrounds","text":"<ul> <li>AutomationStore</li> </ul>"},{"location":"pytest/","title":"PyTest Full Stack - continually developing...","text":""},{"location":"pytest/#full_stack","title":"Full Stack","text":"<p>This framework has tests covering:</p> <ul> <li>SQL Schemas for foreign keys, number of tables, check constraints etc...</li> <li>Unit tests</li> <li>Mocks, patches and monkey patches</li> <li>Behavior Driven Testing templates</li> <li>API testing</li> <li>End to End testing with Playwright</li> </ul>"},{"location":"pytest/#youtube_videos","title":"YouTube videos","text":"<p>Videos are available here: YouTube (being recorded in June 2024)</p>"},{"location":"pytest/#repo","title":"Repo","text":"<p>The PyTest Full Stack repo is available here: PyTest Full Stack</p>"},{"location":"pytest/#installation","title":"Installation","text":"<ul> <li>In your IDE open up the PyTest_01_FULL folder.</li> <li>Create a virtual environment <code>python -m venv venv</code>.</li> <li>Activate your virtual enviromnent: Windows <code>.\\venv\\Scripts\\activte</code> or Mac <code>source venv\\bin\\activate</code>.</li> <li>install requirements <code>pip install -r requirements.txt</code>.</li> <li>for Playwright browsers run <code>playwright install</code>.</li> <li>run all tests <code>python -m pytest -vs</code>.</li> <li>There are around 200 templated tests.</li> <li>The video series goes into features and utils -&gt; YouTube</li> </ul>"},{"location":"pytest/cli/","title":"PyTest_09_CLI","text":""},{"location":"pytest/cli/#about","title":"About","text":"<p>CLI App and how to test</p>"},{"location":"pytest/pytest/","title":"PyTest_01_MAIN","text":""},{"location":"pytest/pytest/#youtube","title":"YouTube","text":"<p>PyTest_01_MAIN</p>"},{"location":"pytest/pytest/#about","title":"About","text":"<p>This has a large selection of tests, many linked to video series. </p> <p>It builds on PyTest_00_MINIMAL with additional tests, detailing how to use PyTest, mocking and async tests.</p>"},{"location":"pytest/pytest/#tutorials","title":"Tutorials","text":"<ul> <li>01_check_set_up to test wiring between src and tests folders.</li> <li>02_py_coffee is a very good series from CoffeeBeforeArch. The code samples are wired in here. He also has a very good PyTest Guide PyTest Guide.</li> <li>03_indian_pythonista is another good series and most of the code samples are included. Indian Pythonista.</li> <li>04 not included</li> <li>05_mocks_patch contains a range of templates for mocking and patching. Acknowledgements and links included.</li> </ul>"},{"location":"pytest/pytest/#repo","title":"Repo","text":"<p>PyTest_01_MAIN</p>"},{"location":"pytest/pytest/#install","title":"Install","text":"<ul> <li>move to <code>PyTest_01_PYTEST</code>.</li> <li>create virtual environment as you wish.</li> <li>run <code>pip install requirements.txt</code>.</li> </ul>"},{"location":"pytest/pytest/#run_tests","title":"Run Tests","text":"<ul> <li>run <code>python -m pytest -vs</code></li> </ul>"},{"location":"pytest/pytest_basic/","title":"PyTest_00_MINIMAL","text":""},{"location":"pytest/pytest_basic/#set_up","title":"Set up","text":"<p>See README.md</p> <p>This uses PyTest_00_MINIMAL and is a simple wiring of src folder for your code and an tests folder for PyTest.</p> <p></p> <p>There is custom logging defined in pytest.ini that outputs to a <code>log</code> folder.</p> <p>One of the tests <code>test_03_logging.py</code> uses logging in its tests.</p> <ul> <li>move to <code>PyTest_00_MINIMAL</code> folder and create a virtual environment, then install requirements.txt:</li> </ul> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"pytest/pytest_basic/#repo","title":"Repo","text":"<p>\ud83d\udc49  PyTest_00_MINIMAL</p>"},{"location":"pytest/pytest_basic/#yt_video","title":"YT video","text":"<p>YouTube</p>"},{"location":"pytest/pytest_basic/#contents","title":"Contents","text":"<p>src/sample.py has a very simple function to test.</p> <pre><code>def add(a: int, b: int):\n    \"\"\"basic function\"\"\"\n    return a + b\n</code></pre>"},{"location":"pytest/pytest_basic/#tests","title":"Tests","text":"<p>There are a number to check everything is wired correctly as well as testing loggin and markers.</p> <p><code>pytest.ini</code> has settings for test locations, markers, logging format. Further information is added in the file.</p> <p>pytest-sugar has been installed to provide prettier console output.</p> <pre><code>python -m pytest \n\npython -m pytest -vs\n</code></pre>"},{"location":"pytest/pytest_core/","title":"PyTest Core","text":""},{"location":"pytest/pytest_core/#about","title":"About","text":"<p>PyTest Core is a set of 4 test suites that build on each other so that the final suite contains the previous three suites. </p> <p>This has a large selection of tests, many linked to video series. </p> <p>It builds on PyTest_00_MINIMAL with additional tests, detailing how to use PyTest, mocking and async tests.</p>"},{"location":"pytest/pytest_core/#tutorials","title":"Tutorials","text":"<ul> <li>01_check_set_up to test wiring between src and tests folders.</li> <li>02_py_coffee is a very good series from CoffeeBeforeArch. The code samples are wired in here. He also has a very good PyTest Guide PyTest Guide.</li> <li>03_indian_pythonista is another good series and most of the code samples are included. Indian Pythonista.</li> <li>04 not included</li> <li>05_mocks_patch contains a range of templates for mocking and patching. Acknowledgements and links included.</li> </ul>"},{"location":"pytest/pytest_core/#install","title":"Install","text":"<ul> <li>move to <code>PyTest_01_MAIN</code>.</li> <li>create virtual environment as you wish.</li> <li>run <code>pip install requirements.txt</code>.</li> </ul>"},{"location":"pytest/pytest_core/#run_tests","title":"Run Tests","text":"<ul> <li>run <code>python -m pytest -vs</code></li> </ul>"},{"location":"pytest/pytest_custom_reports/","title":"Custum CSV Output","text":""},{"location":"pytest/pytest_custom_reports/#details_to_follow","title":"Details to follow","text":""},{"location":"pytest/pytest_custom_terminal_reports/","title":"Custom Terminal Reports","text":""},{"location":"pytest/pytest_custom_terminal_reports/#details_to_follow","title":"Details to follow","text":""},{"location":"pytest/pytest_extended/","title":"PyTest Extended","text":""},{"location":"pytest/pytest_extended/#about","title":"About","text":"<p>PyTest Extended is a set of separate and self contained test suites focussing on a more advanced aspect of PyTest.</p> <ul> <li>DB Testing focusses on testing SQL Schemas for integrity of foreign keys, constraints etc. This ensures that code development does not break the underlying data model.</li> <li>Hooks looks at a number of PyTest hooks to be able to order tests for example, create a CSV-Lite report, use dynamically generated parametrized data sets and so on.</li> <li>Plugins looks at how we can create our own distributable plugins as well as how to test with PyTester.</li> <li>CLI Apps is an demo of testing a CLI app with PyTest.</li> <li>CI Integration and Tox are examples of testing our apps on a variety of Python Versions and with GitHub Actions how to test multiple Python Versions across a number of OS.</li> </ul>"},{"location":"pytest/pytest_hooks/","title":"PyTest_08_HOOKS","text":"<p>This is an isolated test suite to demonstrate variables etc accessible during a PyTest run.</p>"},{"location":"pytest/pytest_hooks/#hooks","title":"Hooks","text":"<p>PyTest has many hooks that we can tap into such as 'seesion_start'. 'make_report'</p> <p>We can use conftest.py as a central location to add our own implementations when these hooks run.</p> <p>In PyTest_07_HOOKS, we use these hooks to create a number of mini-plugins. Remember, hooks are the basis for plugins and if ina file, particulalry conftest.py, then the are 'local' plugins. If we make them distributale via PyPi or GitHub then the are 'pluigns'</p> <p></p> <p>In the conftest.py, we add hooks for:</p> <ul> <li>pytest_configure</li> <li>pytest_sessionstart</li> <li>pytest_sessionfinish</li> <li>pytest_collection_modifyitems - this gathers tests it will do and can display without running tests. One can sort by property as well as add markers dynamically</li> <li>pytest_generate_tests - this enables us to customise tests. The example we look it is how we can dynamically create params for the <code>@pytest.mark.paremetrize</code> feature. This is a Hypothesis Lite as it werem where can create datasets that push the boundaries of values.</li> <li>pytest_runtest_makereport - we get test results and export to CSV, (see below). This can be used to create simple summary reports.</li> </ul> <p>There are many more. A useful article on hooks: https://paragkamble.medium.com/understanding-hooks-in-pytest-892e91edbdb7</p>"},{"location":"pytest/pytest_hooks/#install","title":"Install","text":"<ul> <li>move to <code>PyTest_08_HOOKS</code> </li> <li>create virtual environment as you wish</li> <li>run <code>pip install requirements.txt</code></li> </ul>"},{"location":"pytest/pytest_hooks/#run_tests","title":"Run Tests","text":"<ul> <li>run <code>python -m pytest -vs</code>.</li> <li>you will se output of accessible variables in PyBoxen, (a console formatter based on Rich).</li> <li>some more verbose information has been commented out.</li> <li>Test results are exported to an output pipe delimited CSV file that is timestamped Y-M-D-H-M-S <code>report_2024-05-04-12-55-53.csv</code> in the <code>pytest_runtest_makereport</code> hook. It is <code>|</code> pipe delimited. One can read and extract relevant infomation of test that will be run. It has all the markers including xfail included. <pre><code>test_division|tests/ex01/test_class.py::TestApp::test_division|PASSED|0.00011979998089373112|inner-db2-outer\ntest_example1_pass|tests/ex01/test_functions.py::test_example1_pass|PASSED|0.0009691999293863773|sanity-outer\ntest_example2_pass|tests/ex01/test_functions.py::test_example2_pass|PASSED|0.0006700998637825251|inner-sanity\ntest_example3_xfail|tests/ex01/test_functions.py::test_example3_xfail|FAILED|0.000541699817404151|inner-xfail-setup\ntest_multiplication|tests/ex01/test_class.py::TestApp::test_multiplication|PASSED|8.490006439387798e-05|inner-sanity-db2-db-outer\n</code></pre></li> </ul> <p><code>tests/ex01/test_class.py::TestApp::test_division</code> is the node of the test and has the full 'path' to the test that we might use in the CLI. The test duration in seconds is included too.</p> <p>We can detect xfail either via markers or if we include it in our test name,</p>"},{"location":"pytest/pytest_hooks/#-_create_csv_report","title":"- create CSV report","text":""},{"location":"pytest/pytest_hooks/#-_add_custom_markers","title":"-  add custom markers","text":""},{"location":"pytest/pytest_hooks/#-_sort_tests","title":"-  sort tests","text":""},{"location":"pytest/pytest_hooks/#-_skip_tests","title":"-  skip tests","text":"<p>We can use -k and -m but if we have more complex logic then <code>pytest_collection_modifyitems</code> can help.</p>"},{"location":"pytest/pytest_hooks/#-_dynamic_param_data","title":"-  dynamic param data","text":""},{"location":"pytest/pytest_hooks/#-_config_hook","title":"-  config hook","text":""},{"location":"pytest/pytest_hooks/#-_stash_hook_data","title":"-  stash hook data","text":""},{"location":"pytest/pytest_hooks_order/","title":"PyTest Hooks Order","text":""},{"location":"pytest/pytest_hooks_order/#running_python_-m_pytest_--debug_produces_a_pytestdebuglog_with_hook_order","title":"Running <code>python -m pytest --debug</code> produces a <code>pytestdebug.log</code> with hook order.","text":"<p>from https://paragkamble.medium.com/understanding-hooks-in-pytest-892e91edbdb7#:~:text=These%20hooks%20use%20to%20perform,by%20decorating%20it%20with%20%40pytest. <pre><code>root\n\u2514\u2500\u2500 pytest_cmdline_main\n \u251c\u2500\u2500 pytest_plugin_registered\n \u251c\u2500\u2500 pytest_configure\n \u2502 \u2514\u2500\u2500 pytest_plugin_registered\n \u251c\u2500\u2500 pytest_sessionstart\n \u2502 \u251c\u2500\u2500 pytest_plugin_registered\n \u2502 \u2514\u2500\u2500 pytest_report_header\n \u251c\u2500\u2500 pytest_collection # this will need to be run first and be the wrapper\n \u2502 \u251c\u2500\u2500 pytest_collectstart\n \u2502 \u251c\u2500\u2500 pytest_make_collect_report\n \u2502 \u2502 \u251c\u2500\u2500 pytest_collect_file\n \u2502 \u2502 \u2502 \u2514\u2500\u2500 pytest_pycollect_makemodule # we can specify if our hooks fun first or last\n \u2502 \u2502 \u2514\u2500\u2500 pytest_pycollect_makeitem\n \u2502 \u2502 \u2514\u2500\u2500 pytest_generate_tests\n \u2502 \u2502 \u2514\u2500\u2500 pytest_make_parametrize_id\n \u2502 \u251c\u2500\u2500 pytest_collectreport\n \u2502 \u251c\u2500\u2500 pytest_itemcollected\n \u2502 \u251c\u2500\u2500 pytest_collection_modifyitems\n \u2502 \u2514\u2500\u2500 pytest_collection_finish\n \u2502 \u2514\u2500\u2500 pytest_report_collectionfinish\n \u251c\u2500\u2500 pytest_runtestloop\n \u2502 \u2514\u2500\u2500 pytest_runtest_protocol\n \u2502 \u251c\u2500\u2500 pytest_runtest_logstart\n \u2502 \u251c\u2500\u2500 pytest_runtest_setup\n \u2502 \u2502 \u2514\u2500\u2500 pytest_fixture_setup\n \u2502 \u251c\u2500\u2500 pytest_runtest_makereport\n \u2502 \u251c\u2500\u2500 pytest_runtest_logreport\n \u2502 \u2502 \u2514\u2500\u2500 pytest_report_teststatus\n \u2502 \u251c\u2500\u2500 pytest_runtest_call\n \u2502 \u2502 \u2514\u2500\u2500 pytest_pyfunc_call\n \u2502 \u251c\u2500\u2500 pytest_runtest_teardown\n \u2502 \u2502 \u2514\u2500\u2500 pytest_fixture_post_finalizer\n \u2502 \u2514\u2500\u2500 pytest_runtest_logfinish\n \u251c\u2500\u2500 pytest_sessionfinish\n \u2502 \u2514\u2500\u2500 pytest_terminal_summary\n \u2514\u2500\u2500 pytest_unconfigure\n</code></pre></p> <pre><code>root\n\u2514\u2500\u2500 pytest_cmdline_main\n \u251c\u2500\u2500 pytest_plugin_registered\n \u251c\u2500\u2500 pytest_configure\n \u251c\u2500\u2500 pytest_sessionstart\n \u251c\u2500\u2500 pytest_collection \n \u251c\u2500\u2500 pytest_runtestloopizer\n \u251c\u2500\u2500 pytest_sessionfinish\n \u2514\u2500\u2500 pytest_unconfigure\n</code></pre>"},{"location":"pytest/pytest_ini_files/","title":"Reading .ini files","text":""},{"location":"pytest/pytest_ini_files/#details_to_follow","title":"Details to follow","text":""},{"location":"pytest/pytest_logging/","title":"Logging","text":""},{"location":"pytest/pytest_logging/#details_to_follow","title":"Details to follow","text":""},{"location":"pytest/pytest_plugins/","title":"PyTest_07_PLUGINS","text":""},{"location":"pytest/pytest_plugins/#about","title":"About","text":"<p>When we create fixtures/hooks in Python, we can enable reuse by putting them in a separate file that is then shared. This is a local plugin ineffect.</p> <p>If we name the file <code>conftest.py</code>, PyTest will automatically digest this file and all files in that same folder will have access to these fixtures/hooks.</p> <p>Like CSS, we can have many conftest.py files and the child folder <code>conftest.py</code> file overrides the parent one.</p> <p>This file is thus an automatic local plugin.</p> <p>If we wish to make this distributable then we can create a plugin to upload to PyPi. PyTest_07_PLUGIN has a templated plugin plugin test of the correct form to upload to PyPi.</p>"},{"location":"pytest/pytest_pytest.ini/","title":"The pytest.ini file","text":""},{"location":"pytest/pytest_pytest.ini/#details_to_follow","title":"Details to follow","text":""},{"location":"resources/articles/","title":"Articles","text":"<p>A list of resources I have found useful.</p>"},{"location":"resources/books/","title":"Books","text":"<p>A list of resources I have found useful.</p>"},{"location":"resources/videos/","title":"Videos","text":"<p>A list of resources I have found useful.</p>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/archive/2024/","title":"2024","text":""}]}