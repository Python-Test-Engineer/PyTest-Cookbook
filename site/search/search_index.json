{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Pytest Cookbook - recipes with videos and repos","text":""},{"location":"#purpose_of_this_book","title":"Purpose of this book","text":"<p>To provide a number of ready built and congfigurable FULL STACK PYTHON TEST FRAMEWORK, (PFS), comprising of over 200 highly commented test templates for developers to adapt to their own needs along with resource links that have helped me greatly, as well as integration of these into the frameworks.</p> <p>The PyTest Full Stack suite has an installation tat will just require a 1-2-3 of:</p> <ol> <li><code>pip install -r requirements.txt</code>.</li> <li><code>playwright install</code> to load Playwright browsers.</li> <li><code>python -m pytest -v</code> to run over 200 tests.</li> </ol> <p>PFS uses a number of PyTest hooks for utilities and features.</p> <p>One of these is customising the terminal report and one can configure the output in a number of ways, explained in articles and videos.</p> <p>Here is a sample output:</p>"},{"location":"#custom_header_sections","title":"Custom header sections","text":""},{"location":"#customised_words_colours_and_icons","title":"Customised words, colours and icons","text":""},{"location":"#custom_footer_sections","title":"Custom footer sections","text":"<p>The frameworks have logging and other utilities installed to provide a complete framework.</p> <p>Resources included are:</p> <ol> <li>Links to helpful articles, videos and documentation. </li> <li>Converted and transcribed code of great YT videos where there is no code repo.</li> </ol>"},{"location":"#test_frameworks","title":"Test frameworks","text":"<p>See the README.md in root of each Test framework for detailed and up to date set up instructions.</p> <p>There are two main test frameworks:</p> <ul> <li>PyTest_01_Full - a full stack testing framework from SQL Schemas to E2E testing with Playwright</li> <li>PyTest_02_DJANGO - is its own unique testing framework built from a range of sources. (Under construction and will be a PyTest-Full-Stack test suite for Django).</li> </ul> <p>I strive to acknowledge sources I have used to learn PyTest and any adaptations of code samples used therein.</p> <p>As a curated list of resources, I have integrity over linking to the work of others and due credits are given.</p> <p>Often I am a wrapper around someone else's effort and I try to add a different presentation whre possible, as we often find our understanding with a different presentation of the subject. Hence having may teachers enables us all as eternal students to get our heads around sometimes very complex subjects.</p>"},{"location":"#about_me","title":"About me","text":"<p>I am a Python Test Engineer using PyTest and Playwright as well as a Software Tester and Django developer.</p> <p>I enjoy building Plugins and I have created a PyTest Hooks and Plugin online video course that teaches how to create lite versions of some well known plugins as well as our own useful custom plugins which can be made distributabe:</p> <p>Example plugins are:</p> <ul> <li>CSV Lite Reporter</li> <li>Export results to DB</li> <li>Sorting, randomizing and deselecting tests</li> <li>Customising the console report with colors and icons</li> </ul> <p>The course is available Udemy Hooks and Plugins course and Udemy has a sale every two weeks and the cost would be $20 USD approx.</p> <p></p> <p>There is more information about me and my services here.</p>"},{"location":"#how_best_to_use_this_book","title":"How best to use this book","text":"<p>For the PyTest-Full-Stack framework:</p> <p>Download or git clone from repo.</p> <p>Follow installation instructions in the README.md or the 1-2-3 of:</p> <ol> <li><code>pip install -r requirements.txt</code>.</li> <li><code>playwright install</code> to load Playwright browsers.</li> <li><code>python -m pytest -v</code> to run over 200 tests.</li> </ol> <p>For prettier general console output, Rich and PyBoxen, built on Rich, are used.</p> <p><code>pytest-sugar</code>, an excellent plugin, was used but with the inclusion of the pytest_terminal_summary hook in the conftest.py file of PyTest-Full-Stack, we have a coloruful and decorative console output that is configurable and customisable (see YouTube guide below).</p>"},{"location":"#youtube_videos","title":"YouTube Videos","text":"<p>I have made some videos to assist in using this book.</p> <p>These are available here.</p> <p></p>"},{"location":"learn/","title":"Learning PyTest - Suggested path","text":"<p>I have made some videos to assist in using this PyTest Cookbook and how to customise the hooks and plugins used to create custom terminal reports and custom CSV files.</p> <p>These videos are available here.</p>"},{"location":"learn/#1_coffeebeforearch","title":"1. CoffeeBeforeArch","text":"<p>Located in <code>02_py_coffee</code> in PFS, this is a great video series on PyTest. I have included the tests form his repo as part of the template tests. Links in repo.</p> <p>CoffeeBeforeArch</p>"},{"location":"learn/#2_indian_pythonista","title":"2. Indian Pythonista","text":"<p>Located in <code>03_indian_pythonista</code> in PFS, this is another great video series that has source code included.</p> <p>Indian Pythonista</p>"},{"location":"learn/#3_pytest_with_eric","title":"3. PyTest with Eric","text":"<p>This is perhaps one of the best resources for PyTest, PyTestWithEric, I am creating videos of them and incorporating the GitHub code to provide a second content delivery medium, explaining salient points.</p> <p>This is both for my own technical development and a way of creating a greater audience for this body of work.</p> <p>I have started recording videos of me go through the article and adding them to PyTest Full Stack in 60_pwe.</p> <p>Playlist PyTest With Eric</p> <p>Articles videod:</p> <ul> <li>01 pytest-html</li> <li>02 suppress warnings</li> <li>03 read yaml files with argparse and typer and test</li> <li>04 transactions with SQL Model</li> <li>05 setting up allure reporting</li> <li>06 automated testing with GitHub actions</li> </ul>"},{"location":"learn/#4_hooks_and_plugins","title":"4. Hooks and Plugins","text":"<p>For an advanced look at these topics, I have my course hosted on Udemy:</p> <p>The course is available Udemy Hooks and Plugins course and Udemy has a sale ever two weeks and the cost would be $20 USD approx.</p> <p></p>"},{"location":"asides/asides/","title":"Asides","text":""},{"location":"asides/asides/#what_are_asides","title":"What are asides?","text":"<p>Asides are articles on useful aspects of PyTest Full Stack but are not part of a PyTest Full Stack Run.</p> <p>For example, we have a folder <code>docker</code> that is integrated into PFS, but we also have an isolated set of docker tests that would need to be run in a separate and isolated environment with elements of PFS added in. </p> <p>Essentially the converse of what we are doing in PFS.</p> <p>An example is tests/_isolated_suites which has a docker-postgres-fixtup suite.</p>"},{"location":"asides/asides/#planned_asides","title":"Planned asides","text":"<ul> <li>Mocking - covering the area of mocking, patching and monkeypatching.</li> <li>Docker - some ready to use set ups for use in mocking.</li> <li>Test naming - how the use of structured test names can be use for test management.</li> </ul>"},{"location":"asides/pluggy/","title":"Pluggy","text":""},{"location":"asides/pluggy/#about","title":"About","text":"<p>Pluggy as per docs:</p> <ul> <li> <p>pluggy is the crystallized core of plugin management and hook calling for pytest. It enables 1400+ plugins to extend and customize pytest\u2019s default behaviour. Even pytest itself is composed as a set of pluggy plugins which are invoked in sequence according to a well defined set of protocols.</p> </li> <li> <p>It gives users the ability to extend or modify the behaviour of a host program by installing a plugin for that program. The plugin code will run as part of normal program execution, changing or enhancing certain aspects of it.</p> </li> <li> <p>In essence, pluggy enables function hooking so you can build \u201cpluggable\u201d systems.</p> </li> </ul> <p>I have uploaded a video and repo where I have encoded the 'complete example' in the docs and added a second plugin so that the host can be run with two plugins extending its functionality.</p>"},{"location":"asides/pluggy/#repo","title":"Repo","text":"<p>A tested project is available here: GiHub</p>"},{"location":"asides/pluggy/#yt_video","title":"YT Video","text":"<p>There is an explainer video (7mins) to walk through installation and running: YouTube</p> <p></p>"},{"location":"blog/","title":"Blog","text":""},{"location":"craig/contact/","title":"Contact me","text":"<p>Email: iwswordpress@gmail.com</p> <p>LinkedIn: Craig West</p>"},{"location":"craig/courses/","title":"Online courses","text":""},{"location":"craig/courses/#udemycom","title":"Udemy.com","text":"<p>The course Udemy Hooks and Plugins course has just been published and Udemy has a sale ever two weeks and the cost would be $20 USD approx.</p> <p></p> <p>I am currently developing two courses:</p> <ul> <li>Python - mock, patch and monkeypatch.</li> <li>PyTest Django Full Stack - a DB &lt;-&gt; E2E testing of a generic ecommerce store.</li> </ul> <p>The aim is to make them generic, ready to go templates, that also dive deeper into aspects of Python.</p> <p>I am of the opinion that as developers we do not need to reinvent the wheel - it has (almost) all been done before - and that we should be free to use our creativity to build great proucts.</p> <p>The type of course I would want...</p> <p></p>"},{"location":"craig/cv/","title":"CV","text":"<ul> <li> <p>PythonTestEngineer.co.uk</p> </li> <li> <p>Github CV</p> </li> </ul> <p></p> Python Test Engineer - particulalry Django"},{"location":"craig/cv/#python_test_engineer","title":"Python Test Engineer","text":"<ul> <li>Degree in Chemistry, Oxford University.</li> <li>Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA.</li> <li>Former Business Information Architect.</li> <li>Qualified Accountant Technician and business owner.</li> <li>Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker</li> <li>Talks and workshops given at WordCamps, MeetUps and NDC.</li> </ul>"},{"location":"craig/cv/#talks_and_workshops","title":"Talks and Workshops","text":"<p>A list of talks and workshops I have given: </p> <ul> <li> <p>TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021.</p> </li> <li> <p>LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021.</p> </li> <li> <p>TALK: WP REST API and Web Components =&gt; 100% Internet - WordCamp Santa Clarita, July 2021.</p> </li> <li> <p>TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021.</p> </li> <li> <p>TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021</p> </li> <li> <p>WORKSHOP: WP REST API and you -&gt; Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021 </p> </li> <li> <p>TALK: Web Components as Micro Apps - NDC London, Jan 2021</p> </li> <li> <p>TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC</p> </li> <li> <p>WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020.</p> </li> <li> <p>TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns </p> </li> <li> <p>TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API - WordCamp Vienna February 2020.</p> </li> <li> <p>TALK: Progressive Web Apps - Brighton WordUp November 2019.</p> </li> <li> <p>TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019.</p> </li> <li> <p>TALK: JWT and Authentication - WPHooked London September 2019</p> </li> <li> <p>TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019.</p> </li> </ul>"},{"location":"craig/cv/#published_udemy_courses","title":"Published Udemy Courses","text":"<p>Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD.</p> <p>These have now been retired.</p> <ul> <li>WordPress REST API and AJAX Forms/Pages - DEMO https://www.youtube.com/watch?v=eubhbcGH_Ws&amp;t=6s (paid)</li> <li>Progressive Web Apps - DEMO https://www.youtube.com/watch?v=k_lHvNL0gkw (paid)</li> <li>WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - https://www.udemy.com/course/powerful-html-pages-using-wordpress-component-architecture/ (free)</li> <li>Stylish Dynamic Web Forms with jQuery validation - https://www.udemy.com/course/ready-to-use-form-validation-templates-with-jquery/ (free)</li> </ul>"},{"location":"craig/cv/#youtube_courses_-_developer_to_developer_courses","title":"YouTube Courses - Developer to Developer courses","text":"<p>These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others.</p> <p>There are also some specific videos explaining solutions to set ups other developers may encounter.</p> <ul> <li> <p>HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - https://www.youtube.com/watch?v=QC-JTqQTv2k&amp;list=PLsszRSbzjyvkQwzrJobroRl7z7MfSlePa </p> </li> <li> <p>WP Plugin Boilerplate:  I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent. https://www.youtube.com/watch?v=lJ9ktD4JOfs&amp;list=PLsszRSbzjyvn-RQr4dEjrgnTne2HcJKee</p> </li> </ul>"},{"location":"craig/cv/#volounteering","title":"Volounteering","text":"<p>I volounteer at Codebar.io in Brighton as well as some Community Kitchens.</p>"},{"location":"craig/cv/#outside_interests","title":"Outside interests","text":"<p>These include Community Kitchens, gym, occasional partner dancing and DIY.</p> <p></p>"},{"location":"craig/services/","title":"Services provided","text":""},{"location":"craig/services/#skillset","title":"Skillset","text":"<p>Primarily:</p> <ul> <li>Python</li> <li>PyTest</li> <li>Playwright</li> <li>Django</li> </ul> <p>Tools:</p> <ul> <li>VSCode</li> <li>Git/GitHub Actions</li> <li>Docker</li> </ul>"},{"location":"craig/services/#engagement_style","title":"Engagement Style","text":"<p>I offer on-demand, freelance services starting from 1/2 day blocks.</p> <p>As and when you need it...</p> <p>Tech is a way of life not just a job and I strive to have enthusiasm and passion for the projects I work on.</p>"},{"location":"craig/services/#eligibility","title":"Eligibility","text":"<ul> <li>UK National</li> <li>Fluent English</li> </ul>"},{"location":"craig/services/#on-sitehybrid","title":"On-site/Hybrid","text":"<p>I am based in Brighton and enjoy (local) on-site work as well as working from my home office.</p>"},{"location":"craig/services/#volunteer_coach","title":"Volunteer Coach","text":"<p>I am a volunteer coach with Codebar Brighton.</p>"},{"location":"craig/services/#outside_of_tech","title":"Outside of tech...","text":"<p>I enjoy working in community kitchens and love laughter, creating, doing and trying to work out why things are funny.</p> <p></p>"},{"location":"django_testing/","title":"Django testing","text":"<p>Currently under construction...</p> <p>Using the features of PyTest-Full-Stack, I am planning on developing an ecommerce Django app that will have PyTest Full Stack testing as follows:</p> <ul> <li>SQL schemas</li> <li>Model testing</li> <li>Forms and views testing</li> <li>API testing</li> <li>E2E on the website using Playwright</li> </ul> <p>This will be collated from a great range of sources and be, hopefully, a complete test framework for Django which one can use as a base for one's own projects.</p> <p>I would also like to introduce Test Run Management by logging test runs etc into the Django DB so that we can use the app to manage data from test runs.</p> <p></p>"},{"location":"docker/docker/","title":"PyTest and Docker","text":"<p>Docker seems to be an essential part of testing work.</p> <p>I have done many trainings on Docker and I would say the best training is on my favourite platform Udemy: Docker Bootcamp: Conquer Docker with Real-World Projects</p> <p>Sales every two weeks or so will mean you can get if for $20 USD or so. </p> <p>What I really like about this course is it does not really go into theory but just builds a great number of microservices and connects them. Repetition makes it become part of the muscle and is probably what is needed for a Test Engineer.</p> <p>There are other courses that go deeper and one that I find really good is: Python in Containers</p>"},{"location":"docker/docker/#demo_one","title":"Demo One","text":"<p>PyTest-Full-Stack has an example using <code>pytest-docker</code>.</p> <p>Ensure docker desktop or equivalent is running! \ud83d\ude2c </p> <p>Located in tests/docker. My usual folder naming of 70_docker is unacceptable so I just use docker.</p> <p>There is a YT video of this: pytest-docker</p>"},{"location":"docker/docker/#demo_two","title":"Demo Two","text":"<p>Located in <code>tests/_isolated_suites/docker-pytest-poetry-fixtup-RUN_ISOL</code></p> <p>This is based on the following article: </p> <ul> <li>https://dev.to/farcellier/test-beyond-your-code-with-docker-pytest-3b7g</li> </ul> <p>I have included it here for reference. It won't work with PyTest-Full-Stack and needs to be in its own separate suite.</p> <p>Open tests/_isolated_suites/docker-pytest-poetry-fixtup-RUN_ISOL in own IDE</p> <ul> <li><code>python -m venv venv</code></li> <li><code>.\\venv\\Scripts\\activate</code> or Mac equivalent</li> <li><code>pip install -r requirements.txt</code></li> <li>ensure you remove REACTIVATE_ from front of test_postgressql_database.py so PyTest can discover this test. It was made invisible in this way so it did not collide and fail running of PFS default set up.</li> <li><code>python -m pytest .\\tests\\test_postgressql_database.py -vs</code></li> </ul> <p>Make sure docker is running!</p> <p>There is a YT video of this: pytest-docker</p>"},{"location":"docker/docker/#other_plugins","title":"Other plugins","text":"<p>There are a number of docker plugins for pytest:</p> <ul> <li><code>pytest-docker-compose</code></li> <li><code>pytest-docker-tools</code></li> <li><code>docker-python-unittest-pytest</code> is a more DIY setup.</li> </ul>"},{"location":"docker/docker/#docker-postgres-pgadmin-adminer_-_to_go","title":"Docker-Postgres-PGAdmin-Adminer - to go","text":"<p>I have a YT video and repo that I have tested many times myself. It also uses my custom Postgres image which has PGVector extension added for Semantic Search, (AI RAG).</p> <p></p>"},{"location":"pytest/","title":"PyTest Full Stack","text":""},{"location":"pytest/#full_stack","title":"Full Stack","text":"<p>This framework has tests covering:</p> <ul> <li>SQL Schemas for foreign keys, number of tables, check constraints etc...</li> <li>Unit tests</li> <li>Integrations tests</li> <li>Mock, patch and monkeypatch templates</li> <li>Behavior Driven Testing templates</li> <li>API testing</li> <li>End to End testing with Playwright</li> </ul>"},{"location":"pytest/#youtube_videos","title":"YouTube videos","text":"<p>Videos are available here: YouTube </p>"},{"location":"pytest/#repo","title":"Repo","text":"<p>The PyTest Full Stack repo is available here: PyTest Full Stack</p>"},{"location":"pytest/#installation","title":"Installation","text":"<ul> <li>In your IDE open up the PyTest_01_FULL folder.</li> <li>Create a virtual environment <code>python -m venv venv</code>.</li> <li>Activate your virtual enviromnent: Windows <code>.\\venv\\Scripts\\activte</code> or Mac <code>source venv\\bin\\activate</code>.</li> <li>install requirements <code>pip install -r requirements.txt</code>.</li> <li>for Playwright browsers run <code>playwright install</code>.</li> <li>run all tests <code>python -m pytest -vs</code>.</li> <li>There are around 200 templated tests.</li> <li>The video series goes into features and utils -&gt; YouTube</li> </ul>"},{"location":"pytest/pytest_allure/","title":"Allure Reporting - Windows","text":"<p>This has not been installed in PyTest-Full-Stack but a fine article, as ever, is https://pytest-with-eric.com/reporting/pytest-allure-report/.</p> <p>You will need Allure to run this repo and Java needs to be installed.</p> <p>If you are on Windows, like me, we can set up Java/Allure as follows:</p> <p>I used the following video:</p> <p>Useful JDK Video</p> <p>My video is here:</p> <p>Install Java</p> <p>To install Allure: </p> <p>Allure Install</p> <ul> <li>For Allure, download the zip of the version you want.</li> <li>Unzip and place in a location of your choice.</li> <li>Add the path in environment variables. Mine was C:\\allure\\bin</li> </ul>"},{"location":"pytest/pytest_full_stack_customise/","title":"How to configure your own custom PyTest Full Stack","text":""},{"location":"pytest/pytest_full_stack_customise/#please_see_the_videos_in_the_playlist","title":"Please see the videos in the playlist","text":"<p>YouTube playlist: here</p> <p>This covers:</p> <ul> <li>pytest.ini settings for logging.</li> <li>how to read values from the config.ini files in the config folder.</li> <li>customise the report header in the console output.</li> <li>customising the test status words, colours and icons in the console output.</li> <li>adding a report section at end of console output.</li> <li>and more...</li> </ul> <p></p>"},{"location":"pytest/pytest_test_management/","title":"Test Management","text":""},{"location":"pytest/pytest_test_management/#using_the_test_name_as_meta_data","title":"Using the test name as meta data","text":"<p>If we name our tests with the following structure:</p> <p>test_0001_api_description</p> <p>We can programatically use the pytest_collection_modifyitems(items), where items is a list of tests, to extract out the following information:</p> <ul> <li>test id (0001).</li> <li>type of test, (api), which could be any 3 character code like dbm for database model, int for integrations, unt for unit etc</li> <li>we also get access to the nodeid and markers for each test with this hook.</li> </ul> <p>This can be loaded into a database and then combined with the output CSVs that have:</p> <ul> <li>test id</li> <li>test name</li> <li>any markers</li> <li>test node id which gives folder, parent folders up to tests folder</li> <li>test result</li> <li>test duration</li> </ul> <p>Docstrings can also be extracted and added to the database.</p>"},{"location":"pytest/pytest_test_management/#report_name_as_test_run_information","title":"Report name as test run information","text":"<p>Furthermore, as output test CSV files have the format of <code>report_2024-06-02-13-39-00_9496487.csv</code>, we can split the filename on '_'. giving us the date and time of the test  from the second item. This should be globally unique as it gives the time to the second, but to ensure global uniqueness, a randon intger between, 1_000_000 and 9_999_999 is added.</p> <p>This enable these data tables to be joined to create detailed test reporting. A sprint version number can also be added to create a history of tests by sprint.</p> <p>Extending the database with test creators, creation date, test modifier and modification date, we can create audit trails of tests.</p> <p></p>"},{"location":"pytest/pytest_tests/","title":"Tests","text":""},{"location":"pytest/pytest_tests/#00_check_setup","title":"00 check_setup","text":"<p>These are used to test that:</p> <ul> <li>src and tests are wired correctly</li> <li>read config.ini in the config folder</li> <li>logging works and outputs to log/pytesting.log</li> <li>test a sample mock works</li> </ul>"},{"location":"pytest/pytest_tests/#01_inspect","title":"01 Inspect","text":"<p>Using SQLModel's inspect, we run tests on SQL schema to verify foreign keys, check constraints etc exist. Inspired by Very Academy's TDD Fast Api course.</p>"},{"location":"pytest/pytest_tests/#02_coffeebeforearch","title":"02 CoffeeBeforeArch","text":"<p>Located in <code>02_py_coffee</code> in PFS, this is a great video series on PyTest. I have included the tests form his repo as part of the template tests. Links in repo.</p> <p>CoffeeBeforeArch</p>"},{"location":"pytest/pytest_tests/#03_indian_pythonista","title":"03 Indian Pythonista","text":"<p>Located in <code>03_indian_pythonista</code> in PFS, this is another great video series that has source code included.</p> <p>Indian Pythonista</p>"},{"location":"pytest/pytest_tests/#05_mocks_patch","title":"05 mocks_patch","text":"<p>A large number of templated mocks and patches, with extensive code comments. I have adapted them as necessary and the links to the YouTube videos are included.</p> <p>Some did not have source code so I transcribed the code from the videos.</p>"},{"location":"pytest/pytest_tests/#10_py_api_pets","title":"10 py_api_pets","text":"<p>Using Playwright, the full CRUD api tests to https://petstore.swagger.io/v2/pet/ is included providing templates for API testing.</p>"},{"location":"pytest/pytest_tests/#20_playwright","title":"20 playwright","text":"<p>A great range of End2End tests from a variety of sources.</p>"},{"location":"pytest/pytest_tests/#50_pwe_bdd","title":"50 pwe_bdd","text":"<p>A working example of using the pyTest-bdd, based on the awesome resource https://pytest-with-eric.com/ which is perhaps the best resource on PyTest available.</p>"},{"location":"pytest/pytest_tests/#60_pwe","title":"60 pwe","text":"<p>Using the awesome resource https://pytest-with-eric.com/, I have started to create videos of me working through Eric's articles and integrating them into PFS.</p>"},{"location":"pytest/pytest_tests/#docker","title":"Docker","text":"<p>These are tests that use/test Docker implementations. Alas, my favoured numbering system was not possible due to erroring, but is section 70.</p> <p></p>"},{"location":"toolbox/","title":"Toolbox","text":"<p>This section is for stand alone projects that offer tools that QA Test Engineers may use but are not part of PyTest Full Stack.</p> <p>They can be integrated if required.</p> <p>These include:</p> <ul> <li>Setting up Allure and JDK</li> <li>Docker-Postgres-PgAdmin-Adminer</li> <li>Pydantic tools</li> <li>Using our Docker Postges set up with YoYo for database migrations and versioning YoYo.</li> </ul>"},{"location":"toolbox/allure_windows_setup/","title":"Allure Reporting - Windows","text":"<p>If you are on Windows, like me, we can set up Allure as follows:</p> <p>I used the following video:</p> <p>Useful JDK Video</p> <p>My video is here:</p> <p>Install Java</p> <p>To install Allure: </p> <p>Allure Install</p> <ul> <li>For Allure, download the zip of the version you want.</li> <li>Unzip and place in a location of your choice.</li> <li>Add the path in environment variables. Mine was C:\\allure\\bin </li> </ul>"},{"location":"toolbox/docker_postgres_setup/","title":"Docker Postgress PgAdmin Adminer","text":"<p>This uses my Postgres image that has the VectorDB extension installed, (for semantic search).</p> <p>It has both PgAdmin and Adminer as Postgress clients.</p> <p>There are range of SQL Crud files included so that you have Python-Docker-Postgres working.</p> <p>I had some issues with this type of set up but came up with my own docker-compose file.</p> <p>YouTube Video</p> <p>The repo is here: GitHub</p> <p>There are a number of ways to set up a volume.</p> <p>For me, the following saved the Postgres data:</p> <pre><code>volumes:\n   - ./db-data/:/var/lib/postgresql/data/\n</code></pre> <p>and it uses the default storage location for data in Postgres.</p> <p>Using the named volume approach gave me a few issues.</p> <p></p>"},{"location":"toolbox/pytest_pydantic/","title":"Pydantic Utilities","text":"<p>I have a number of utilities based on Pydantic that can be of use.</p> <p>These will be added to the toolbox in due course...</p>"}]}