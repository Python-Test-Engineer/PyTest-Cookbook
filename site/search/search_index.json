{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The Pytest Cookbook - recipes with videos and repos \u00b6 Purpose of this book \u00b6 To provide a range of ready congfigured PYTHON TEST FRAMEWORKS with a 'one step install', comprising of templates and references for developers to adapt to their own needs. To provide curated resources of articles, videos and books that I have found useful. The premise is that if a developer has an easy to set up test suite with example tests, combined with links to video and text resources, they can readily adapt the test suites as needed without having to set them up and coonfigure them. Test Suites \u00b6 See the README.md in root of each Test Suite for detailed and up to date set up instructions. These four are incremental, with each suite adding more functionality to the previous one: PyTest_00_MINIMAL - a basic src folder wired to PyTest with custom logging and pytest-sugar console formating. PyTest_01_PYTEST - as above but with a large number of ready made test templates demoing how to use PyTest along with templates for Mocking and Patching. PyTest_02_API - as above with API testing and Playwright e2e/functional testing. PyTest_03_BDD - as above with Behavior Driven testing that enables the use of native English test requirement files to be wired to PyTest and Behave Framework. BDD enables all stakeholders to work on these 'feature' test files in plain English which are then translated to Python test code. These are self-contained Test Suites: PyTest_04_DB_TESTING - is a standalone test suite for testing database schemas such as foreigh keys, constraints, nullability etc. Uses SQLModel (SQLAlchemy + Pydantic) to inspect DB. Uses SQLite as test DB and this has some restricted schema information but there are tests for thes. PyTest_05_DJANGO is its own unique testing suite built from a range of sources. PyTest_06_HYPOTHESIS is a standalone property based test suite that can provide templates and resources on how to use property based testing. It can be thought of as very extensive parameter based testing to test edge cases and hone in on them. PyTest_07_PLUGIN - this is a template PyTest plugin project for adaptation. PyTest_08_HOOKS - a small project outputing information on hooks and what they provide. PyTest_09_CLI - testing a Typer CLI project. PyTest_10_CI_CD - a CI/CD example to show how we can use GitHub actions to test our code base on multiple Python versions and OS. May be replaced with TOX. Installation \u00b6 Download the main repo and navigate to required TEST_SUITE. The Github repo for all these TEST_SUITES is here . Follow install instructions in README.md file of test suite. YouTube Videos \u00b6 These are available here . TODO \u00b6 Django Tests https://www.photondesigner.com/articles/unit-tests-factory-boy-faker?ref=yt-unit-tests-factory-boy-faker Testing middleware with override_settings https://www.youtube.com/watch?v=TTEEr4N-lKw Add use of dynamically adding markers import pytest def pytest_collection_modifyitems(items): for item in items: if \"model\" in item.name: item.add_marker(pytest.mark.model) if \"model_structure\" in item.name: item.add_marker(pytest.mark.model_structure) if \"unit\" in item.name: item.add_marker(pytest.mark.unit) if \"unit_schema\" in item.name: item.add_marker(pytest.mark.unit_schema)","title":"Home"},{"location":"#the_pytest_cookbook_-_recipes_with_videos_and_repos","text":"","title":"The Pytest Cookbook - recipes with videos and repos"},{"location":"#purpose_of_this_book","text":"To provide a range of ready congfigured PYTHON TEST FRAMEWORKS with a 'one step install', comprising of templates and references for developers to adapt to their own needs. To provide curated resources of articles, videos and books that I have found useful. The premise is that if a developer has an easy to set up test suite with example tests, combined with links to video and text resources, they can readily adapt the test suites as needed without having to set them up and coonfigure them.","title":"Purpose of this book"},{"location":"#test_suites","text":"See the README.md in root of each Test Suite for detailed and up to date set up instructions. These four are incremental, with each suite adding more functionality to the previous one: PyTest_00_MINIMAL - a basic src folder wired to PyTest with custom logging and pytest-sugar console formating. PyTest_01_PYTEST - as above but with a large number of ready made test templates demoing how to use PyTest along with templates for Mocking and Patching. PyTest_02_API - as above with API testing and Playwright e2e/functional testing. PyTest_03_BDD - as above with Behavior Driven testing that enables the use of native English test requirement files to be wired to PyTest and Behave Framework. BDD enables all stakeholders to work on these 'feature' test files in plain English which are then translated to Python test code. These are self-contained Test Suites: PyTest_04_DB_TESTING - is a standalone test suite for testing database schemas such as foreigh keys, constraints, nullability etc. Uses SQLModel (SQLAlchemy + Pydantic) to inspect DB. Uses SQLite as test DB and this has some restricted schema information but there are tests for thes. PyTest_05_DJANGO is its own unique testing suite built from a range of sources. PyTest_06_HYPOTHESIS is a standalone property based test suite that can provide templates and resources on how to use property based testing. It can be thought of as very extensive parameter based testing to test edge cases and hone in on them. PyTest_07_PLUGIN - this is a template PyTest plugin project for adaptation. PyTest_08_HOOKS - a small project outputing information on hooks and what they provide. PyTest_09_CLI - testing a Typer CLI project. PyTest_10_CI_CD - a CI/CD example to show how we can use GitHub actions to test our code base on multiple Python versions and OS. May be replaced with TOX.","title":"Test Suites"},{"location":"#installation","text":"Download the main repo and navigate to required TEST_SUITE. The Github repo for all these TEST_SUITES is here . Follow install instructions in README.md file of test suite.","title":"Installation"},{"location":"#youtube_videos","text":"These are available here .","title":"YouTube Videos"},{"location":"#todo","text":"Django Tests https://www.photondesigner.com/articles/unit-tests-factory-boy-faker?ref=yt-unit-tests-factory-boy-faker Testing middleware with override_settings https://www.youtube.com/watch?v=TTEEr4N-lKw Add use of dynamically adding markers import pytest def pytest_collection_modifyitems(items): for item in items: if \"model\" in item.name: item.add_marker(pytest.mark.model) if \"model_structure\" in item.name: item.add_marker(pytest.mark.model_structure) if \"unit\" in item.name: item.add_marker(pytest.mark.unit) if \"unit_schema\" in item.name: item.add_marker(pytest.mark.unit_schema)","title":"TODO"},{"location":"api/","text":"References \u00b6","title":"References"},{"location":"api/#references","text":"","title":"References"},{"location":"api_testing/api/","text":"API Testing \u00b6 This is part of TEST_SUITE_02_API_PLAYWRIGHT which you may have installed already for Playwright testing. Install \u00b6 move to TEST_SUITE_02 create virtual environment as you wish run pip install requirements_02.txt run playwright install to load in browsers. IMPORTANT. Run Tests \u00b6 run python -m pytest -vs","title":"API Testing"},{"location":"api_testing/api/#api_testing","text":"This is part of TEST_SUITE_02_API_PLAYWRIGHT which you may have installed already for Playwright testing.","title":"API Testing"},{"location":"api_testing/api/#install","text":"move to TEST_SUITE_02 create virtual environment as you wish run pip install requirements_02.txt run playwright install to load in browsers. IMPORTANT.","title":"Install"},{"location":"api_testing/api/#run_tests","text":"run python -m pytest -vs","title":"Run Tests"},{"location":"api_testing/testing_playgrounds/","text":"Testing Playgrounds \u00b6 AutomationStore","title":"Testing Playgrounds"},{"location":"api_testing/testing_playgrounds/#testing_playgrounds","text":"AutomationStore","title":"Testing Playgrounds"},{"location":"ci_integration/ci_github/","text":"CI Integration \u00b6 One way to test one's code on many versions of python and operating systems is to use GitHub actions. We can use a GitHyb workflow using .github/workflows/some_actions.yaml in our project. In TEST_04_CI, we use a file called ci_test.yaml but it can be any named yaml file. This suite uses the TEST__00_MINIMAL with some project packages removed. One can see that running this just on windows in the GitHub actions, highlights and error on Python 3.6. We can extend to use Ubuntu and MacOS. This is an adaptation of Carberra Installation tips: I would suggest extracting the TEST_04_CI folder to its own location and set up a new repository so that once can test these github actions. create new CI_TEST repo for example. copy folder to its own location so that one can do git init etc and then connect to the CI_TEST repo. once you push up code to repo, the GitHub actions will start as the yaml file has on: push: branches: [ main ]","title":"About"},{"location":"ci_integration/ci_github/#ci_integration","text":"One way to test one's code on many versions of python and operating systems is to use GitHub actions. We can use a GitHyb workflow using .github/workflows/some_actions.yaml in our project. In TEST_04_CI, we use a file called ci_test.yaml but it can be any named yaml file. This suite uses the TEST__00_MINIMAL with some project packages removed. One can see that running this just on windows in the GitHub actions, highlights and error on Python 3.6. We can extend to use Ubuntu and MacOS. This is an adaptation of Carberra Installation tips: I would suggest extracting the TEST_04_CI folder to its own location and set up a new repository so that once can test these github actions. create new CI_TEST repo for example. copy folder to its own location so that one can do git init etc and then connect to the CI_TEST repo. once you push up code to repo, the GitHub actions will start as the yaml file has on: push: branches: [ main ]","title":"CI Integration"},{"location":"craig/","text":"Craig West - Python Test Engineer \u00b6 Degree in Chemistry, Oxford University. Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA. Former Business Information Architect. Qualified Accountant Technician and business owner. Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker Talks and workshops given at WordCamps, MeetUps and NDC. Connect with me \u00b6 \ud83c\udf10 https://python-test-engineer.netlify.app/ \ud83d\udceb mrcraigwest@hotmail.com \ud83d\udda5\ufe0f https://www.youtube.com/@iwswordpress/featured Python Test Framework \u00b6 I am developing a collated resource for Python Testing along with a range of test Suites with 'one click' set up. https://github.com/iwswordpress/generic-pytest-playwright-pytest-bdd-framework Talks and Workshops \u00b6 A list of talks and workshops I have given: TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021. LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021. TALK: WP REST API and Web Components => 100% Internet - WordCamp Santa Clarita, July 2021. TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021. TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021. WORKSHOP: WP REST API and you -> Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021. TALK: Web Components as Micro Apps - NDC London, Jan 2021 TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020. WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC. WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC. WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020. WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020. WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020. TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020. WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns. TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020. WORKSHOP: WordPress REST API - WordCamp Vienna February 2020. TALK: Progressive Web Apps - Brighton WordUp November 2019. TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019. TALK: JWT and Authentication - WPHooked London September 2019 TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019. Published Udemy Courses \u00b6 Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD. These have now been retired. WordPress REST API and AJAX Forms/Pages - DEMO (paid) Progressive Web Apps - DEMO (paid). WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - DEMO (free). Stylish Dynamic Web Forms with jQuery validation - DEMO (free). YouTube Courses - Developer to Developer courses \u00b6 These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others. There are also some specific videos explaining solutions to set ups other developers may encounter. HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - DEMO . WP Plugin Boilerplate: I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent - DEMO . WP Plugin Boilerplate: I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent - DEMO . Volounteering \u00b6 I volounteer at Codebar.io in Brighton. Outside interests \u00b6 These include Community Kitchens, gym, occasional partner dancing and DIY.","title":"Index"},{"location":"craig/#craig_west_-_python_test_engineer","text":"Degree in Chemistry, Oxford University. Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA. Former Business Information Architect. Qualified Accountant Technician and business owner. Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker Talks and workshops given at WordCamps, MeetUps and NDC.","title":"Craig West - Python Test Engineer"},{"location":"craig/#connect_with_me","text":"\ud83c\udf10 https://python-test-engineer.netlify.app/ \ud83d\udceb mrcraigwest@hotmail.com \ud83d\udda5\ufe0f https://www.youtube.com/@iwswordpress/featured","title":"Connect with me"},{"location":"craig/#python_test_framework","text":"I am developing a collated resource for Python Testing along with a range of test Suites with 'one click' set up. https://github.com/iwswordpress/generic-pytest-playwright-pytest-bdd-framework","title":"Python Test Framework"},{"location":"craig/#talks_and_workshops","text":"A list of talks and workshops I have given: TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021. LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021. TALK: WP REST API and Web Components => 100% Internet - WordCamp Santa Clarita, July 2021. TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021. TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021. WORKSHOP: WP REST API and you -> Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021. TALK: Web Components as Micro Apps - NDC London, Jan 2021 TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020. WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC. WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC. WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020. WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020. WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020. TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020. WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns. TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020. WORKSHOP: WordPress REST API - WordCamp Vienna February 2020. TALK: Progressive Web Apps - Brighton WordUp November 2019. TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019. TALK: JWT and Authentication - WPHooked London September 2019 TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019.","title":"Talks and Workshops"},{"location":"craig/#published_udemy_courses","text":"Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD. These have now been retired. WordPress REST API and AJAX Forms/Pages - DEMO (paid) Progressive Web Apps - DEMO (paid). WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - DEMO (free). Stylish Dynamic Web Forms with jQuery validation - DEMO (free).","title":"Published Udemy Courses"},{"location":"craig/#youtube_courses_-_developer_to_developer_courses","text":"These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others. There are also some specific videos explaining solutions to set ups other developers may encounter. HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - DEMO . WP Plugin Boilerplate: I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent - DEMO . WP Plugin Boilerplate: I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent - DEMO .","title":"YouTube Courses - Developer to Developer courses"},{"location":"craig/#volounteering","text":"I volounteer at Codebar.io in Brighton.","title":"Volounteering"},{"location":"craig/#outside_interests","text":"These include Community Kitchens, gym, occasional partner dancing and DIY.","title":"Outside interests"},{"location":"craig/contact/","text":"Contact me \u00b6 Email \u00b6","title":"Contact"},{"location":"craig/contact/#contact_me","text":"","title":"Contact me"},{"location":"craig/contact/#email","text":"","title":"Email"},{"location":"craig/craig/","text":"PythonTestEngineer.co.uk Github CV Github Repo Python Test Engineer - particulalry Django Python Test Engineer \u00b6 Degree in Chemistry, Oxford University. Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA. Former Business Information Architect. Qualified Accountant Technician and business owner. Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker Talks and workshops given at WordCamps, MeetUps and NDC. Talks and Workshops \u00b6 A list of talks and workshops I have given: TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021. LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021. TALK: WP REST API and Web Components => 100% Internet - WordCamp Santa Clarita, July 2021. TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021. TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021 WORKSHOP: WP REST API and you -> Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021 TALK: Web Components as Micro Apps - NDC London, Jan 2021 TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020 WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020 WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020. WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020. TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020. WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020. WORKSHOP: WordPress REST API - WordCamp Vienna February 2020. TALK: Progressive Web Apps - Brighton WordUp November 2019. TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019. TALK: JWT and Authentication - WPHooked London September 2019 TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019. Published Udemy Courses \u00b6 Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD. These have now been retired. WordPress REST API and AJAX Forms/Pages - DEMO https://www.youtube.com/watch?v=eubhbcGH_Ws&t=6s (paid) Progressive Web Apps - DEMO https://www.youtube.com/watch?v=k_lHvNL0gkw (paid) WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - https://www.udemy.com/course/powerful-html-pages-using-wordpress-component-architecture/ (free) Stylish Dynamic Web Forms with jQuery validation - https://www.udemy.com/course/ready-to-use-form-validation-templates-with-jquery/ (free) YouTube Courses - Developer to Developer courses \u00b6 These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others. There are also some specific videos explaining solutions to set ups other developers may encounter. HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - https://www.youtube.com/watch?v=QC-JTqQTv2k&list=PLsszRSbzjyvkQwzrJobroRl7z7MfSlePa WP Plugin Boilerplate: I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent. https://www.youtube.com/watch?v=lJ9ktD4JOfs&list=PLsszRSbzjyvn-RQr4dEjrgnTne2HcJKee Volounteering \u00b6 I volounteer at Codebar.io in Brighton as well as some Community Kitchens. Outside interests \u00b6 These include Community Kitchens, gym, occasional partner dancing and DIY.","title":"Craig"},{"location":"craig/craig/#python_test_engineer","text":"Degree in Chemistry, Oxford University. Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA. Former Business Information Architect. Qualified Accountant Technician and business owner. Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker Talks and workshops given at WordCamps, MeetUps and NDC.","title":"Python Test Engineer"},{"location":"craig/craig/#talks_and_workshops","text":"A list of talks and workshops I have given: TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021. LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021. TALK: WP REST API and Web Components => 100% Internet - WordCamp Santa Clarita, July 2021. TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021. TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021 WORKSHOP: WP REST API and you -> Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021 TALK: Web Components as Micro Apps - NDC London, Jan 2021 TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020 WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020 WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020. WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020. TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020. WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020. WORKSHOP: WordPress REST API - WordCamp Vienna February 2020. TALK: Progressive Web Apps - Brighton WordUp November 2019. TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019. TALK: JWT and Authentication - WPHooked London September 2019 TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019.","title":"Talks and Workshops"},{"location":"craig/craig/#published_udemy_courses","text":"Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD. These have now been retired. WordPress REST API and AJAX Forms/Pages - DEMO https://www.youtube.com/watch?v=eubhbcGH_Ws&t=6s (paid) Progressive Web Apps - DEMO https://www.youtube.com/watch?v=k_lHvNL0gkw (paid) WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - https://www.udemy.com/course/powerful-html-pages-using-wordpress-component-architecture/ (free) Stylish Dynamic Web Forms with jQuery validation - https://www.udemy.com/course/ready-to-use-form-validation-templates-with-jquery/ (free)","title":"Published Udemy Courses"},{"location":"craig/craig/#youtube_courses_-_developer_to_developer_courses","text":"These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others. There are also some specific videos explaining solutions to set ups other developers may encounter. HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - https://www.youtube.com/watch?v=QC-JTqQTv2k&list=PLsszRSbzjyvkQwzrJobroRl7z7MfSlePa WP Plugin Boilerplate: I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent. https://www.youtube.com/watch?v=lJ9ktD4JOfs&list=PLsszRSbzjyvn-RQr4dEjrgnTne2HcJKee","title":"YouTube Courses - Developer to Developer courses"},{"location":"craig/craig/#volounteering","text":"I volounteer at Codebar.io in Brighton as well as some Community Kitchens.","title":"Volounteering"},{"location":"craig/craig/#outside_interests","text":"These include Community Kitchens, gym, occasional partner dancing and DIY.","title":"Outside interests"},{"location":"craig/cv/","text":"PythonTestEngineer.co.uk Github CV Github Repo Python Test Engineer - particulalry Django Python Test Engineer \u00b6 Degree in Chemistry, Oxford University. Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA. Former Business Information Architect. Qualified Accountant Technician and business owner. Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker Talks and workshops given at WordCamps, MeetUps and NDC. Talks and Workshops \u00b6 A list of talks and workshops I have given: TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021. LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021. TALK: WP REST API and Web Components => 100% Internet - WordCamp Santa Clarita, July 2021. TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021. TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021 WORKSHOP: WP REST API and you -> Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021 TALK: Web Components as Micro Apps - NDC London, Jan 2021 TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020 WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020 WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020. WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020. TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020. WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020. WORKSHOP: WordPress REST API - WordCamp Vienna February 2020. TALK: Progressive Web Apps - Brighton WordUp November 2019. TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019. TALK: JWT and Authentication - WPHooked London September 2019 TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019. Published Udemy Courses \u00b6 Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD. These have now been retired. WordPress REST API and AJAX Forms/Pages - DEMO https://www.youtube.com/watch?v=eubhbcGH_Ws&t=6s (paid) Progressive Web Apps - DEMO https://www.youtube.com/watch?v=k_lHvNL0gkw (paid) WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - https://www.udemy.com/course/powerful-html-pages-using-wordpress-component-architecture/ (free) Stylish Dynamic Web Forms with jQuery validation - https://www.udemy.com/course/ready-to-use-form-validation-templates-with-jquery/ (free) YouTube Courses - Developer to Developer courses \u00b6 These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others. There are also some specific videos explaining solutions to set ups other developers may encounter. HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - https://www.youtube.com/watch?v=QC-JTqQTv2k&list=PLsszRSbzjyvkQwzrJobroRl7z7MfSlePa WP Plugin Boilerplate: I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent. https://www.youtube.com/watch?v=lJ9ktD4JOfs&list=PLsszRSbzjyvn-RQr4dEjrgnTne2HcJKee Volounteering \u00b6 I volounteer at Codebar.io in Brighton as well as some Community Kitchens. Outside interests \u00b6 These include Community Kitchens, gym, occasional partner dancing and DIY.","title":"CV"},{"location":"craig/cv/#python_test_engineer","text":"Degree in Chemistry, Oxford University. Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA. Former Business Information Architect. Qualified Accountant Technician and business owner. Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker Talks and workshops given at WordCamps, MeetUps and NDC.","title":"Python Test Engineer"},{"location":"craig/cv/#talks_and_workshops","text":"A list of talks and workshops I have given: TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021. LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021. TALK: WP REST API and Web Components => 100% Internet - WordCamp Santa Clarita, July 2021. TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021. TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021 WORKSHOP: WP REST API and you -> Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021 TALK: Web Components as Micro Apps - NDC London, Jan 2021 TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020 WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020 WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020. WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020. TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020. WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020. WORKSHOP: WordPress REST API - WordCamp Vienna February 2020. TALK: Progressive Web Apps - Brighton WordUp November 2019. TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019. TALK: JWT and Authentication - WPHooked London September 2019 TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019.","title":"Talks and Workshops"},{"location":"craig/cv/#published_udemy_courses","text":"Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD. These have now been retired. WordPress REST API and AJAX Forms/Pages - DEMO https://www.youtube.com/watch?v=eubhbcGH_Ws&t=6s (paid) Progressive Web Apps - DEMO https://www.youtube.com/watch?v=k_lHvNL0gkw (paid) WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - https://www.udemy.com/course/powerful-html-pages-using-wordpress-component-architecture/ (free) Stylish Dynamic Web Forms with jQuery validation - https://www.udemy.com/course/ready-to-use-form-validation-templates-with-jquery/ (free)","title":"Published Udemy Courses"},{"location":"craig/cv/#youtube_courses_-_developer_to_developer_courses","text":"These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others. There are also some specific videos explaining solutions to set ups other developers may encounter. HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - https://www.youtube.com/watch?v=QC-JTqQTv2k&list=PLsszRSbzjyvkQwzrJobroRl7z7MfSlePa WP Plugin Boilerplate: I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent. https://www.youtube.com/watch?v=lJ9ktD4JOfs&list=PLsszRSbzjyvn-RQr4dEjrgnTne2HcJKee","title":"YouTube Courses - Developer to Developer courses"},{"location":"craig/cv/#volounteering","text":"I volounteer at Codebar.io in Brighton as well as some Community Kitchens.","title":"Volounteering"},{"location":"craig/cv/#outside_interests","text":"These include Community Kitchens, gym, occasional partner dancing and DIY.","title":"Outside interests"},{"location":"craig/services/","text":"Services provided \u00b6 Services \u00b6 Testing \u00b6 Django \u00b6 Engagement Style \u00b6 Hybrid \u00b6","title":"Services"},{"location":"craig/services/#services_provided","text":"","title":"Services provided"},{"location":"craig/services/#services","text":"","title":"Services"},{"location":"craig/services/#testing","text":"","title":"Testing"},{"location":"craig/services/#django","text":"","title":"Django"},{"location":"craig/services/#engagement_style","text":"","title":"Engagement Style"},{"location":"craig/services/#hybrid","text":"","title":"Hybrid"},{"location":"db_testing/testing/","text":"Database structural testing \u00b6 Location: \u00b6 PyTest_04_DB Purpose: \u00b6 DB integrity \u00b6 Test existence and integrity of tables, foreigh keys, constraints etc. Uses: \u00b6 SQL Model \u00b6 SQLModels's inspect feature. Information: \u00b6 SQLModel is a library for interacting with SQL databases from Python code, with Python objects. It is designed to be intuitive, easy to use, highly compatible, and robust. SQLModel is based on Python type annotations, and powered by Pydantic and SQLAlchemy. https://sqlmodel.tiangolo.com/ We can get metadata on tables/views to check: Check tables and views exist. Check foreign keys, defaults, unique constraints, nullability and more. And more... We will work with an SQLite example but the SQLModel engine feature enables the same code to be used on a variety of databases. TODO \u00b6 Copy model tests from Very FastAPI","title":"About"},{"location":"db_testing/testing/#database_structural_testing","text":"","title":"Database structural testing"},{"location":"db_testing/testing/#location","text":"PyTest_04_DB","title":"Location:"},{"location":"db_testing/testing/#purpose","text":"","title":"Purpose:"},{"location":"db_testing/testing/#db_integrity","text":"Test existence and integrity of tables, foreigh keys, constraints etc.","title":"DB integrity"},{"location":"db_testing/testing/#uses","text":"","title":"Uses:"},{"location":"db_testing/testing/#sql_model","text":"SQLModels's inspect feature.","title":"SQL Model"},{"location":"db_testing/testing/#information","text":"SQLModel is a library for interacting with SQL databases from Python code, with Python objects. It is designed to be intuitive, easy to use, highly compatible, and robust. SQLModel is based on Python type annotations, and powered by Pydantic and SQLAlchemy. https://sqlmodel.tiangolo.com/ We can get metadata on tables/views to check: Check tables and views exist. Check foreign keys, defaults, unique constraints, nullability and more. And more... We will work with an SQLite example but the SQLModel engine feature enables the same code to be used on a variety of databases.","title":"Information:"},{"location":"db_testing/testing/#todo","text":"Copy model tests from Very FastAPI","title":"TODO"},{"location":"django_testing/","text":"Django tesing \u00b6 There are currently two suites - 05 and 05A 05A is based on MDN's tutorial for Django. I have adapted this and add some Bootstrap. It has a nice testing structure of: - test__models - test__views - test__forms (I have seen the use of two underscores after test and I find this more aesthetic.)","title":"About"},{"location":"django_testing/#django_tesing","text":"There are currently two suites - 05 and 05A 05A is based on MDN's tutorial for Django. I have adapted this and add some Bootstrap. It has a nice testing structure of: - test__models - test__views - test__forms (I have seen the use of two underscores after test and I find this more aesthetic.)","title":"Django tesing"},{"location":"django_testing/apps/","text":"Apps \u00b6 A compilation of various soruces in one project. accounts/posts \u00b6 Based on a TDD video series of Django by Ssali Jonathan , I have extended it to include a PyTest folder as well as additional Django Unit Tests. orm - temporarily removed as it classes with new 'ecommerce' \u00b6 Based on an ORM Deep Dive series by BugBytes , the code for the 18+ videos was not included in the repo so I have added files for each of the videos. I have also included some of my own ORM scripts as well as others from Very Academy . It uses django-extensions, django-extensions , which offers the ability to run manage.py runscript <file_name_but_not_py_extension> , as if in a shell. Custom Commands to load data, SQL queries, transactions are also included and I have extended the code to include other useful utilities, as well as some relevant tests. I have added dditional tests from the Django Docs are also included. ecommerce \u00b6 Tom Dekan tests - blog and video link https://www.photondesigner.com/articles/unit-tests-factory-boy-faker?ref=yt-unit-tests-factory-boy-faker filemanager \u00b6 A small app concerned with file uploading and management, this offers some more examples of testing with UnitTest and PyTest.","title":"Apps"},{"location":"django_testing/apps/#apps","text":"A compilation of various soruces in one project.","title":"Apps"},{"location":"django_testing/apps/#accountsposts","text":"Based on a TDD video series of Django by Ssali Jonathan , I have extended it to include a PyTest folder as well as additional Django Unit Tests.","title":"accounts/posts"},{"location":"django_testing/apps/#orm_-_temporarily_removed_as_it_classes_with_new_ecommerce","text":"Based on an ORM Deep Dive series by BugBytes , the code for the 18+ videos was not included in the repo so I have added files for each of the videos. I have also included some of my own ORM scripts as well as others from Very Academy . It uses django-extensions, django-extensions , which offers the ability to run manage.py runscript <file_name_but_not_py_extension> , as if in a shell. Custom Commands to load data, SQL queries, transactions are also included and I have extended the code to include other useful utilities, as well as some relevant tests. I have added dditional tests from the Django Docs are also included.","title":"orm - temporarily removed as it classes with new 'ecommerce'"},{"location":"django_testing/apps/#ecommerce","text":"Tom Dekan tests - blog and video link https://www.photondesigner.com/articles/unit-tests-factory-boy-faker?ref=yt-unit-tests-factory-boy-faker","title":"ecommerce"},{"location":"django_testing/apps/#filemanager","text":"A small app concerned with file uploading and management, this offers some more examples of testing with UnitTest and PyTest.","title":"filemanager"},{"location":"django_testing/index_django/","text":"Django \u00b6 About \u00b6 This has a large selection of tests, many linked to video series. TODO \u00b6 https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django https://github.com/elena/example-tests-django-hypothesis pytest-django bugbytes - middleware and pytest-django: - https://www.youtube.com/watch?v=TTEEr4N-lKw - https://www.youtube.com/watch?v=pdatgYDXmSE","title":"Django"},{"location":"django_testing/index_django/#django","text":"","title":"Django"},{"location":"django_testing/index_django/#about","text":"This has a large selection of tests, many linked to video series.","title":"About"},{"location":"django_testing/index_django/#todo","text":"https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django https://github.com/elena/example-tests-django-hypothesis pytest-django bugbytes - middleware and pytest-django: - https://www.youtube.com/watch?v=TTEEr4N-lKw - https://www.youtube.com/watch?v=pdatgYDXmSE","title":"TODO"},{"location":"django_testing/setup/","text":"Instructions \u00b6 cd TEST_SUITE_05_DJANGO. creater virtual env python -m venv venv . pip install -r requirents.txt run playwright install to load in playwright browsers. in one terminal run python manage.py runserver . For unittests run python manage.py test in another run python -m pytest -v or python -m pytest -v --headed if using playwright and you want to see browsers. Sometimes this may not work so you will need to add the headless=False to the test. DB has had migrations. superuser: admin password super user is admin and password . pytest-sugar added for fancier terminal output Rich and PyBoxen used for fancy console output. Examples are in the orm app. django-extensions used in orm app so that we can run scripts in a py file rather than in shell. See orm/_NOTES.md for more details - TODO Alternative \u00b6 If one is not using requirements.txt one would need to install: django django-extensions for the utuilities used in orm. pytest, pytest-django, pytest-cov. playwright for browser based testing (an then run playrwight install to load browsers). pytest-sugar for nicer output format of tests. pyboxen for fancy console output used in orm. requests for order app. References \u00b6 Pybites - https://www.youtube.com/watch?v=L5jWFU2sVXQ for help with setting up PyTest tests for Django. Ssali Jonathan - https://www.youtube.com/watch?v=Nn3Yjea5KCI&list=PLEt8Tae2spYlVZUBBEE9PtX-NXk_hw7o4 for the TDD approach to building the posts app. This gives a basis for many good tests. I have transported a few for demonstation purposes in pytest_tests . (PyTest searches for all test files with test_ or whatever is specified in the pytest.ini file in root). Todos \u00b6 These will use their own individual app to showcase them. DjangoStars - https://djangostars.com/blog/django-pytest-testing/ https://pytest-with-eric.com/pytest-advanced/pytest-django-restapi-testing/#Conftest-and-Setup https://dev.to/sherlockcodes/pytest-with-django-rest-framework-from-zero-to-hero-8c4","title":"Setup"},{"location":"django_testing/setup/#instructions","text":"cd TEST_SUITE_05_DJANGO. creater virtual env python -m venv venv . pip install -r requirents.txt run playwright install to load in playwright browsers. in one terminal run python manage.py runserver . For unittests run python manage.py test in another run python -m pytest -v or python -m pytest -v --headed if using playwright and you want to see browsers. Sometimes this may not work so you will need to add the headless=False to the test. DB has had migrations. superuser: admin password super user is admin and password . pytest-sugar added for fancier terminal output Rich and PyBoxen used for fancy console output. Examples are in the orm app. django-extensions used in orm app so that we can run scripts in a py file rather than in shell. See orm/_NOTES.md for more details - TODO","title":"Instructions"},{"location":"django_testing/setup/#alternative","text":"If one is not using requirements.txt one would need to install: django django-extensions for the utuilities used in orm. pytest, pytest-django, pytest-cov. playwright for browser based testing (an then run playrwight install to load browsers). pytest-sugar for nicer output format of tests. pyboxen for fancy console output used in orm. requests for order app.","title":"Alternative"},{"location":"django_testing/setup/#references","text":"Pybites - https://www.youtube.com/watch?v=L5jWFU2sVXQ for help with setting up PyTest tests for Django. Ssali Jonathan - https://www.youtube.com/watch?v=Nn3Yjea5KCI&list=PLEt8Tae2spYlVZUBBEE9PtX-NXk_hw7o4 for the TDD approach to building the posts app. This gives a basis for many good tests. I have transported a few for demonstation purposes in pytest_tests . (PyTest searches for all test files with test_ or whatever is specified in the pytest.ini file in root).","title":"References"},{"location":"django_testing/setup/#todos","text":"These will use their own individual app to showcase them. DjangoStars - https://djangostars.com/blog/django-pytest-testing/ https://pytest-with-eric.com/pytest-advanced/pytest-django-restapi-testing/#Conftest-and-Setup https://dev.to/sherlockcodes/pytest-with-django-rest-framework-from-zero-to-hero-8c4","title":"Todos"},{"location":"django_testing/tests/","text":"Tests \u00b6 These are located within each app under the tests folder. The standard test.py is best deleted otherwise the test runner can get confused and tests won't run. Running python manage.py test will run all the tests. python -m pytest will also run these tests plus any other tests in root tests folder. For clarification, I have called this folder pytest-tests . PyTest searches the whole project for test files.","title":"Tests"},{"location":"django_testing/tests/#tests","text":"These are located within each app under the tests folder. The standard test.py is best deleted otherwise the test runner can get confused and tests won't run. Running python manage.py test will run all the tests. python -m pytest will also run these tests plus any other tests in root tests folder. For clarification, I have called this folder pytest-tests . PyTest searches the whole project for test files.","title":"Tests"},{"location":"hypothesis/","text":"When writing unit tests, it\u2019s hard to consider all possible edge cases and validate that your code works correctly. This is sometimes caught in production and a quick and speedy patch needs to be deployed. Only for a new bug to emerge later. There will always be cases you didn\u2019t consider, making this an ongoing maintenance job. Unit testing solves only some of these issues. Property-based testing is a complementary approach to traditional unit testing, where test cases are generated based on properties or constriants that the code should satisfy. Hypothesis addresses this limitation by automatically generating test data based on specified strategies. This allows developers to test a much broader range of inputs and outputs than traditional unit tests, increasing the likelihood of catching edge cases and unexpected behaviour. https://github.com/elena/example-tests-django-hypothesis https://www.drmaciver.com/2015/06/hypothesis-for-django/ https://www.agiliq.com/blog/2019/01/hypothesis-in-drf/ https://www.youtube.com/watch?v=7It3sIrTAVo https://www.slideshare.net/slideshow/hypothesis-randomised-testing-for-django/58357011 https://github.com/HypothesisWorks/hypothesis/blob/master/hypothesis-python/examples/test_basic.py Hypothesis PyPi Pytest-with-Eric is a very good resource.","title":"About"},{"location":"hypothesis/hypothesis/","text":"When writing unit tests, it\u2019s hard to consider all possible edge cases and validate that your code works correctly. This is sometimes caught in production and a quick and speedy patch needs to be deployed. Only for a new bug to emerge later. There will always be cases you didn\u2019t consider, making this an ongoing maintenance job. Unit testing solves only some of these issues. Property-based testing is a complementary approach to traditional unit testing, where test cases are generated based on properties or constriants that the code should satisfy. Hypothesis addresses this limitation by automatically generating test data based on specified strategies. This allows developers to test a much broader range of inputs and outputs than traditional unit tests, increasing the likelihood of catching edge cases and unexpected behaviour. https://github.com/elena/example-tests-django-hypothesis https://www.drmaciver.com/2015/06/hypothesis-for-django/ https://www.agiliq.com/blog/2019/01/hypothesis-in-drf/ https://www.youtube.com/watch?v=7It3sIrTAVo https://www.slideshare.net/slideshow/hypothesis-randomised-testing-for-django/58357011 https://github.com/HypothesisWorks/hypothesis/blob/master/hypothesis-python/examples/test_basic.py Hypothesis PyPi Pytest-with-Eric is a very good resource.","title":"Hypothesis"},{"location":"hypothesis/syntax_highlighting_demo/","text":"Hypothesis Testing Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Bash \u00b6 # Minimal makefile for Sphinx documentation # # You can set these variables from the command line, and also # from the environment for the first two. SPHINXOPTS ? = SPHINXBUILD ? = sphinx-build SOURCEDIR = source BUILDDIR = build # Put it first so that \"make\" without argument is like \"make help\". help: @ $( SPHINXBUILD ) -M help \" $( SOURCEDIR ) \" \" $( BUILDDIR ) \" $( SPHINXOPTS ) $( O ) .PHONY: help Makefile # Catch-all target: route all unknown targets to Sphinx using the new # \"make mode\" option. $(O) is meant as a shortcut for $(SPHINXOPTS). %: Makefile @ $( SPHINXBUILD ) -M $@ \" $( SOURCEDIR ) \" \" $( BUILDDIR ) \" $( SPHINXOPTS ) $( O ) Syntax highlighting Example \u00b6 import flask import flask_saml app = flask . Flask ( __name__ ) app . config . update ({ 'SECRET_KEY' : 'soverysecret' , 'SAML_METADATA_URL' : 'https://mymetadata.xml' , }) flask_saml . FlaskSAML ( app ) Sample layout \u00b6 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 about.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 site \u251c\u2500\u2500 404 .html \u251c\u2500\u2500 about \u2502 \u2514\u2500\u2500 search_index.json \u251c\u2500\u2500 sitemap.xml \u2514\u2500\u2500 sitemap.xml.gz","title":"Syntax highlighting demo"},{"location":"hypothesis/syntax_highlighting_demo/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Commands"},{"location":"hypothesis/syntax_highlighting_demo/#bash","text":"# Minimal makefile for Sphinx documentation # # You can set these variables from the command line, and also # from the environment for the first two. SPHINXOPTS ? = SPHINXBUILD ? = sphinx-build SOURCEDIR = source BUILDDIR = build # Put it first so that \"make\" without argument is like \"make help\". help: @ $( SPHINXBUILD ) -M help \" $( SOURCEDIR ) \" \" $( BUILDDIR ) \" $( SPHINXOPTS ) $( O ) .PHONY: help Makefile # Catch-all target: route all unknown targets to Sphinx using the new # \"make mode\" option. $(O) is meant as a shortcut for $(SPHINXOPTS). %: Makefile @ $( SPHINXBUILD ) -M $@ \" $( SOURCEDIR ) \" \" $( BUILDDIR ) \" $( SPHINXOPTS ) $( O )","title":"Bash"},{"location":"hypothesis/syntax_highlighting_demo/#syntax_highlighting_example","text":"import flask import flask_saml app = flask . Flask ( __name__ ) app . config . update ({ 'SECRET_KEY' : 'soverysecret' , 'SAML_METADATA_URL' : 'https://mymetadata.xml' , }) flask_saml . FlaskSAML ( app )","title":"Syntax highlighting Example"},{"location":"hypothesis/syntax_highlighting_demo/#sample_layout","text":"\u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 about.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 site \u251c\u2500\u2500 404 .html \u251c\u2500\u2500 about \u2502 \u2514\u2500\u2500 search_index.json \u251c\u2500\u2500 sitemap.xml \u2514\u2500\u2500 sitemap.xml.gz","title":"Sample layout"},{"location":"playwright_api/","text":"Playwright Testing \u00b6 About \u00b6 Playwright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation. Playwright recommends using the official Playwright Pytest plugin to write end-to-end tests. It provides context isolation, running it on multiple browser configurations out of the box. Alternatively you can use the library to manually write the testing infrastructure with your preferred test-runner. The Pytest plugin utilizes the sync version of Playwright, there is also an async version accessible via the library. Playwright - Python Install \u00b6 move to TEST_SUITE_02_API_PLAYWRIGHT create virtual environment as you wish run pip install requirements_02.txt run playwright install to load in browsers. IMPORTANT. Run Tests \u00b6 run python -m pytest -vs","title":"About"},{"location":"playwright_api/#playwright_testing","text":"","title":"Playwright Testing"},{"location":"playwright_api/#about","text":"Playwright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation. Playwright recommends using the official Playwright Pytest plugin to write end-to-end tests. It provides context isolation, running it on multiple browser configurations out of the box. Alternatively you can use the library to manually write the testing infrastructure with your preferred test-runner. The Pytest plugin utilizes the sync version of Playwright, there is also an async version accessible via the library. Playwright - Python","title":"About"},{"location":"playwright_api/#install","text":"move to TEST_SUITE_02_API_PLAYWRIGHT create virtual environment as you wish run pip install requirements_02.txt run playwright install to load in browsers. IMPORTANT.","title":"Install"},{"location":"playwright_api/#run_tests","text":"run python -m pytest -vs","title":"Run Tests"},{"location":"playwright_api/api/","text":"Hosting and Deployment \u00b6 GitHub Pages and GitHub \u00b6 Host source code on GitHub. Build and deploy with: mkdocs gh-deploy GitHub Actions GitLab Pages and GitLab \u00b6 Host source code on GitLab. Build and deploy with GitLab CI/CD. Netlify \u00b6 Host source code on: GitHub GitLab BitBucket Build and deploy with Netlify. AWS Amplify Console \u00b6 Host source code on: GitHub GitLab BitBucket AWS CodeCommit Build and deploy with AWS Amplify Console.","title":"About"},{"location":"playwright_api/api/#hosting_and_deployment","text":"","title":"Hosting and Deployment"},{"location":"playwright_api/api/#github_pages_and_github","text":"Host source code on GitHub. Build and deploy with: mkdocs gh-deploy GitHub Actions","title":"GitHub Pages and GitHub"},{"location":"playwright_api/api/#gitlab_pages_and_gitlab","text":"Host source code on GitLab. Build and deploy with GitLab CI/CD.","title":"GitLab Pages and GitLab"},{"location":"playwright_api/api/#netlify","text":"Host source code on: GitHub GitLab BitBucket Build and deploy with Netlify.","title":"Netlify"},{"location":"playwright_api/api/#aws_amplify_console","text":"Host source code on: GitHub GitLab BitBucket AWS CodeCommit Build and deploy with AWS Amplify Console.","title":"AWS Amplify Console"},{"location":"playwright_api/playwright/","text":"Playwright Testing \u00b6 About \u00b6 Playwright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation. Playwright recommends using the official Playwright Pytest plugin to write end-to-end tests. It provides context isolation, running it on multiple browser configurations out of the box. Alternatively you can use the library to manually write the testing infrastructure with your preferred test-runner. The Pytest plugin utilizes the sync version of Playwright, there is also an async version accessible via the library. Playwright - Python Install \u00b6 move to TEST_SUITE_02_API_PLAYWRIGHT create virtual environment as you wish run pip install requirements_02.txt run playwright install to load in browsers. IMPORTANT. Run Tests \u00b6 run python -m pytest -vs","title":"Playwright"},{"location":"playwright_api/playwright/#playwright_testing","text":"","title":"Playwright Testing"},{"location":"playwright_api/playwright/#about","text":"Playwright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation. Playwright recommends using the official Playwright Pytest plugin to write end-to-end tests. It provides context isolation, running it on multiple browser configurations out of the box. Alternatively you can use the library to manually write the testing infrastructure with your preferred test-runner. The Pytest plugin utilizes the sync version of Playwright, there is also an async version accessible via the library. Playwright - Python","title":"About"},{"location":"playwright_api/playwright/#install","text":"move to TEST_SUITE_02_API_PLAYWRIGHT create virtual environment as you wish run pip install requirements_02.txt run playwright install to load in browsers. IMPORTANT.","title":"Install"},{"location":"playwright_api/playwright/#run_tests","text":"run python -m pytest -vs","title":"Run Tests"},{"location":"playwright_api/testing_playgrounds/","text":"Testing Playgrounds \u00b6 AutomationStore","title":"Testing Playgrounds"},{"location":"playwright_api/testing_playgrounds/#testing_playgrounds","text":"AutomationStore","title":"Testing Playgrounds"},{"location":"pytest/","text":"PyTest \u00b6 Purpose of this book \u00b6 To provide a range of ready congfigured PYTHON TEST FRAMEWORKS with a 'one step install', comprising of templates and references for developers to adapt to their own needs. To provide curated resources of articles, videos and books that I have found useful. Frameworks, apps and folders may well have additional README.md files to give more detailed instructions. ker(pytest.mark.unit) if \"unit_schema\" in item.name: item.add_marker(pytest.mark.unit_schema)","title":"About"},{"location":"pytest/#pytest","text":"","title":"PyTest"},{"location":"pytest/#purpose_of_this_book","text":"To provide a range of ready congfigured PYTHON TEST FRAMEWORKS with a 'one step install', comprising of templates and references for developers to adapt to their own needs. To provide curated resources of articles, videos and books that I have found useful. Frameworks, apps and folders may well have additional README.md files to give more detailed instructions. ker(pytest.mark.unit) if \"unit_schema\" in item.name: item.add_marker(pytest.mark.unit_schema)","title":"Purpose of this book"},{"location":"pytest/pytest/","text":"PyTest - TEST_SUITE_01 \u00b6 About \u00b6 This has a large selection of tests, many linked to video series. Tutorials \u00b6 01_check_set_up to test wiring between src and tests folders. 02_py_coffee is a very good series from CoffeeBeforeArch . The code samples are wired in here. 03_indian_pythonista is another good series and most of the code samples are included. Indian Pythonista . 04 not included 05_mocks_patch contains a range of templates for mocking and patching. Acknowledgements and links included. 06_async has some templates for async testing Install \u00b6 move to TEST_SUITE_01 create virtual environment as you wish run pip install requirements_01.txt Run Tests \u00b6 run python -m pytest -vs TODO \u00b6 https://www.youtube.com/watch?v=ujRo8n0LsU4&list=PLWBKAf81pmOaP9naRiNAqug6EBnkPakvY&index=95 mock with lru_cache override.","title":"PyTest"},{"location":"pytest/pytest/#pytest_-_test_suite_01","text":"","title":"PyTest - TEST_SUITE_01"},{"location":"pytest/pytest/#about","text":"This has a large selection of tests, many linked to video series.","title":"About"},{"location":"pytest/pytest/#tutorials","text":"01_check_set_up to test wiring between src and tests folders. 02_py_coffee is a very good series from CoffeeBeforeArch . The code samples are wired in here. 03_indian_pythonista is another good series and most of the code samples are included. Indian Pythonista . 04 not included 05_mocks_patch contains a range of templates for mocking and patching. Acknowledgements and links included. 06_async has some templates for async testing","title":"Tutorials"},{"location":"pytest/pytest/#install","text":"move to TEST_SUITE_01 create virtual environment as you wish run pip install requirements_01.txt","title":"Install"},{"location":"pytest/pytest/#run_tests","text":"run python -m pytest -vs","title":"Run Tests"},{"location":"pytest/pytest/#todo","text":"https://www.youtube.com/watch?v=ujRo8n0LsU4&list=PLWBKAf81pmOaP9naRiNAqug6EBnkPakvY&index=95 mock with lru_cache override.","title":"TODO"},{"location":"pytest/pytest_basic/","text":"PyTest Basic \u00b6 Set up \u00b6 This uses TEST_SUITE_00 and is a simple wiring of src folder for your code and an tests folder for PyTest. There is custom logging defined in pytest.ini that outputs to a log folder. move to TEST_SUITE_00 folder and pip install -r requirements_00.txt Sample layout \u00b6 \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 about.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 site \u251c\u2500\u2500 404 .html \u251c\u2500\u2500 about \u2502 \u2514\u2500\u2500 search_index.json \u251c\u2500\u2500 sitemap.xml \u2514\u2500\u2500 sitemap.xml.gz Tests \u00b6 pytest-sugar has been installed to provide prettier console output. python -m pytest python -m pytest -vs \ud83d\udc49 Click me to download zip","title":"PyTest Basic"},{"location":"pytest/pytest_basic/#pytest_basic","text":"","title":"PyTest Basic"},{"location":"pytest/pytest_basic/#set_up","text":"This uses TEST_SUITE_00 and is a simple wiring of src folder for your code and an tests folder for PyTest. There is custom logging defined in pytest.ini that outputs to a log folder. move to TEST_SUITE_00 folder and pip install -r requirements_00.txt","title":"Set up"},{"location":"pytest/pytest_basic/#sample_layout","text":"\u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 about.md \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 mkdocs.yml \u2514\u2500\u2500 site \u251c\u2500\u2500 404 .html \u251c\u2500\u2500 about \u2502 \u2514\u2500\u2500 search_index.json \u251c\u2500\u2500 sitemap.xml \u2514\u2500\u2500 sitemap.xml.gz","title":"Sample layout"},{"location":"pytest/pytest_basic/#tests","text":"pytest-sugar has been installed to provide prettier console output. python -m pytest python -m pytest -vs \ud83d\udc49 Click me to download zip","title":"Tests"},{"location":"pytest/pytest_hooks/","text":"PyTest Hooks \u00b6 Hooks \u00b6 PyTest has many hooks that we can tap into such as 'seesion_start'. 'make_report' We can use conftest.py as a central location to add our own implementations when these hooks run. pytest_sessionstart pytest_sessionstart pytest_collection_modifyitems - this gathers tests it will do and can display without running tests. pytest_sessionfinish pytest_runtest_makereport - we get test results and export to CSV. There are many more. A useful article on hooks: https://paragkamble.medium.com/understanding-hooks-in-pytest-892e91edbdb7 PyTest_08_HOOKS \u00b6 This is an isolated test suite to demonstrate variables etc accessible during a PyTest run. Install \u00b6 move to PyTest_08_HOOKS create virtual environment as you wish run pip install requirement.txt Run Tests \u00b6 run python -m pytest -vs you will se output of accessible variables in PyBoxen, (a console formatter based on Rich). Test restults are exported toa CSV in the pytest_runtest_makereport hook. TODO \u00b6","title":"PyTest Hooks"},{"location":"pytest/pytest_hooks/#pytest_hooks","text":"","title":"PyTest Hooks"},{"location":"pytest/pytest_hooks/#hooks","text":"PyTest has many hooks that we can tap into such as 'seesion_start'. 'make_report' We can use conftest.py as a central location to add our own implementations when these hooks run. pytest_sessionstart pytest_sessionstart pytest_collection_modifyitems - this gathers tests it will do and can display without running tests. pytest_sessionfinish pytest_runtest_makereport - we get test results and export to CSV. There are many more. A useful article on hooks: https://paragkamble.medium.com/understanding-hooks-in-pytest-892e91edbdb7","title":"Hooks"},{"location":"pytest/pytest_hooks/#pytest_08_hooks","text":"This is an isolated test suite to demonstrate variables etc accessible during a PyTest run.","title":"PyTest_08_HOOKS"},{"location":"pytest/pytest_hooks/#install","text":"move to PyTest_08_HOOKS create virtual environment as you wish run pip install requirement.txt","title":"Install"},{"location":"pytest/pytest_hooks/#run_tests","text":"run python -m pytest -vs you will se output of accessible variables in PyBoxen, (a console formatter based on Rich). Test restults are exported toa CSV in the pytest_runtest_makereport hook.","title":"Run Tests"},{"location":"pytest/pytest_hooks/#todo","text":"","title":"TODO"},{"location":"resources/articles/","text":"A list of resources I have found useful.","title":"Articles"},{"location":"resources/books/","text":"A list of resources I have found useful.","title":"Books"},{"location":"resources/videos/","text":"A list of resources I have found useful.","title":"Videos"}]}