{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Pytest Cookbook - recipes with videos and repos","text":""},{"location":"#purpose_of_this_book_-_test_deploy","title":"Purpose of this book - TEST DEPLOY","text":"<p>To provide a range of ready congfigured PYTHON TEST FRAMEWORKS with a 'one step install', comprising of templates and references for developers to adapt to their own needs.</p> <p>To provide curated resources of articles, videos and books that I have found useful.</p> <p>Frameworks, apps and folders may well have additional README.md files to give more detailed instructions.</p>"},{"location":"#test_suites","title":"Test Suites","text":"<p>These four are incremental, with each suite adding more functionality to the previous one:</p> <ul> <li>PyTest_00_MINIMAL - a basic src folder wired to PyTest with custom logging and pytest-sugar console formating.</li> <li>PyTest_01_PYTEST - as above but with a large number of ready made test templates demoing how to use PyTest along with templates for Mocking and Patching.</li> <li>PyTest_02_API_PLAYWRIGHT - as above with API testing and Playwright e2e/functional testing.</li> <li>PyTest_03_BDD - as above with Behavior Driven testing that enables the use of native English test requirement files to be wired to PyTest and Behave Framework. BDD enables all stakeholders to work on these 'feature' test files in plain English which are then translated to Python test code.</li> </ul> <p>These are self-contained Test Suites:</p> <ul> <li>PyTest_04_DB_TESTING - is a standalone test suite for testing database schemas such as foreigh kets, constraints, nullability etc. Uses SQLModel (SQLAlchemy + Pydantic)</li> <li>PyTest__05_DJANGO is its own unique testing suite built from a range of sources.</li> <li>PyTest_06_HYPOTHESIS is a standalone property based test suite that can provide templates and resources on how to use property based testing.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<ul> <li>Download the main repo and navigate to required TEST_SUITE. The Github repo for all these TEST_SUITES is here.</li> <li>Follow install instructions in README.md file of test suite.</li> </ul>"},{"location":"#youtube_videos","title":"YouTube Videos","text":"<p>These are available here.</p>"},{"location":"#todo","title":"TODO","text":"<p>Django Tests</p> <ul> <li>https://www.photondesigner.com/articles/unit-tests-factory-boy-faker?ref=yt-unit-tests-factory-boy-faker</li> </ul> <p>Testing middleware with <code>override_settings</code></p> <ul> <li>https://www.youtube.com/watch?v=TTEEr4N-lKw</li> </ul> <p>Add use of dynamically adding markers import pytest</p> <p>def pytest_collection_modifyitems(items):     for item in items:         if \"model\" in item.name:             item.add_marker(pytest.mark.model)         if \"model_structure\" in item.name:             item.add_marker(pytest.mark.model_structure)         if \"unit\" in item.name:             item.add_marker(pytest.mark.unit)         if \"unit_schema\" in item.name:             item.add_marker(pytest.mark.unit_schema)</p>"},{"location":"api/","title":"References","text":""},{"location":"api_testing/api/","title":"API Testing","text":"<p>This is part of TEST_SUITE_02_API_PLAYWRIGHT which you may have installed already for Playwright testing.</p>"},{"location":"api_testing/api/#install","title":"Install","text":"<ul> <li>move to <code>TEST_SUITE_02</code> </li> <li>create virtual environment as you wish</li> <li>run <code>pip install requirements_02.txt</code></li> <li>run <code>playwright install</code> to load in browsers. IMPORTANT.</li> </ul>"},{"location":"api_testing/api/#run_tests","title":"Run Tests","text":"<ul> <li>run <code>python -m pytest -vs</code></li> </ul>"},{"location":"api_testing/testing_playgrounds/","title":"Testing Playgrounds","text":"<ul> <li>AutomationStore</li> </ul>"},{"location":"ci_integration/ci_github/","title":"CI Integration","text":"<p>One way to test one's code on many versions of python and operating systems is to use GitHub actions.</p> <p>We can use a GitHyb workflow using <code>.github/workflows/some_actions.yaml</code> in our project.</p> <p>In TEST_04_CI, we use a file called ci_test.yaml but it can be any named yaml file.</p> <p>This suite uses the TEST__00_MINIMAL with some project packages removed.</p> <p>One can see that running this just on windows in the GitHub actions, highlights and error on Python 3.6.</p> <p></p> <p>We can extend to use Ubuntu and MacOS.</p> <p>This is an adaptation of Carberra</p> <p>Installation tips:</p> <p>I would suggest extracting the TEST_04_CI folder to its own location and set up a new repository so that once can test these github actions. </p> <ul> <li>create new CI_TEST repo for example.</li> <li>copy folder to its own location so that one can do <code>git init</code> etc and then connect to the CI_TEST repo.</li> <li>once you push up code to repo, the GitHub actions will start as the yaml file has </li> </ul> <pre><code>on:\n   push:\n      branches: [ main ]\n</code></pre>"},{"location":"craig/","title":"Index","text":""},{"location":"craig/#craig_west_-_python_test_engineer","title":"Craig West - Python Test Engineer","text":"<ul> <li>Degree in Chemistry, Oxford University.</li> <li>Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA.</li> <li>Former Business Information Architect.</li> <li>Qualified Accountant Technician and business owner.</li> <li>Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker</li> <li>Talks and workshops given at WordCamps, MeetUps and NDC.</li> </ul>"},{"location":"craig/#connect_with_me","title":"Connect with me","text":"<ul> <li>\ud83c\udf10 https://python-test-engineer.netlify.app/</li> <li>\ud83d\udceb mrcraigwest@hotmail.com</li> <li>\ud83d\udda5\ufe0f https://www.youtube.com/@iwswordpress/featured</li> </ul>"},{"location":"craig/#python_test_framework","title":"Python Test Framework","text":"<p>I am developing a collated resource for Python Testing along with a range of test Suites with 'one click' set up. https://github.com/iwswordpress/generic-pytest-playwright-pytest-bdd-framework</p>"},{"location":"craig/#talks_and_workshops","title":"Talks and Workshops","text":"<p>A list of talks and workshops I have given:</p> <ul> <li> <p>TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021.</p> </li> <li> <p>LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021.</p> </li> <li> <p>TALK: WP REST API and Web Components =&gt; 100% Internet - WordCamp Santa Clarita, July 2021.</p> </li> <li> <p>TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021.</p> </li> <li> <p>TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021.</p> </li> <li> <p>WORKSHOP: WP REST API and you -&gt; Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021.</p> </li> <li> <p>TALK: Web Components as Micro Apps - NDC London, Jan 2021</p> </li> <li> <p>TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020.</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC.</p> </li> <li> <p>WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC.</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020.</p> </li> <li> <p>TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns.</p> </li> <li> <p>TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API - WordCamp Vienna February 2020.</p> </li> <li> <p>TALK: Progressive Web Apps - Brighton WordUp November 2019.</p> </li> <li> <p>TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019.</p> </li> <li> <p>TALK: JWT and Authentication - WPHooked London September 2019</p> </li> <li> <p>TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019.</p> </li> </ul>"},{"location":"craig/#published_udemy_courses","title":"Published Udemy Courses","text":"<p>Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD.</p> <p>These have now been retired.</p> <ul> <li>WordPress REST API and AJAX Forms/Pages - DEMO (paid)</li> <li>Progressive Web Apps - DEMO (paid).</li> <li>WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - DEMO (free).</li> <li>Stylish Dynamic Web Forms with jQuery validation - DEMO (free).</li> </ul>"},{"location":"craig/#youtube_courses_-_developer_to_developer_courses","title":"YouTube Courses - Developer to Developer courses","text":"<p>These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others.</p> <p>There are also some specific videos explaining solutions to set ups other developers may encounter.</p> <ul> <li> <p>HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - DEMO.</p> </li> <li> <p>WP Plugin Boilerplate:  I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent - DEMO.</p> </li> <li>WP Plugin Boilerplate:  I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent - DEMO.</li> </ul>"},{"location":"craig/#volounteering","title":"Volounteering","text":"<p>I volounteer at Codebar.io in Brighton.</p>"},{"location":"craig/#outside_interests","title":"Outside interests","text":"<p>These include Community Kitchens, gym, occasional partner dancing and DIY.</p>"},{"location":"craig/contact/","title":"Contact me","text":""},{"location":"craig/contact/#email","title":"Email","text":""},{"location":"craig/craig/","title":"Craig","text":"<ul> <li> <p>PythonTestEngineer.co.uk</p> </li> <li> <p>Github CV</p> </li> <li> <p>Github Repo</p> </li> </ul> <p></p> Python Test Engineer - particulalry Django"},{"location":"craig/craig/#python_test_engineer","title":"Python Test Engineer","text":"<ul> <li>Degree in Chemistry, Oxford University.</li> <li>Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA.</li> <li>Former Business Information Architect.</li> <li>Qualified Accountant Technician and business owner.</li> <li>Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker</li> <li>Talks and workshops given at WordCamps, MeetUps and NDC.</li> </ul>"},{"location":"craig/craig/#talks_and_workshops","title":"Talks and Workshops","text":"<p>A list of talks and workshops I have given: </p> <ul> <li> <p>TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021.</p> </li> <li> <p>LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021.</p> </li> <li> <p>TALK: WP REST API and Web Components =&gt; 100% Internet - WordCamp Santa Clarita, July 2021.</p> </li> <li> <p>TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021.</p> </li> <li> <p>TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021</p> </li> <li> <p>WORKSHOP: WP REST API and you -&gt; Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021 </p> </li> <li> <p>TALK: Web Components as Micro Apps - NDC London, Jan 2021</p> </li> <li> <p>TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC</p> </li> <li> <p>WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020.</p> </li> <li> <p>TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns </p> </li> <li> <p>TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API - WordCamp Vienna February 2020.</p> </li> <li> <p>TALK: Progressive Web Apps - Brighton WordUp November 2019.</p> </li> <li> <p>TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019.</p> </li> <li> <p>TALK: JWT and Authentication - WPHooked London September 2019</p> </li> <li> <p>TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019.</p> </li> </ul>"},{"location":"craig/craig/#published_udemy_courses","title":"Published Udemy Courses","text":"<p>Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD.</p> <p>These have now been retired.</p> <ul> <li>WordPress REST API and AJAX Forms/Pages - DEMO https://www.youtube.com/watch?v=eubhbcGH_Ws&amp;t=6s (paid)</li> <li>Progressive Web Apps - DEMO https://www.youtube.com/watch?v=k_lHvNL0gkw (paid)</li> <li>WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - https://www.udemy.com/course/powerful-html-pages-using-wordpress-component-architecture/ (free)</li> <li>Stylish Dynamic Web Forms with jQuery validation - https://www.udemy.com/course/ready-to-use-form-validation-templates-with-jquery/ (free)</li> </ul>"},{"location":"craig/craig/#youtube_courses_-_developer_to_developer_courses","title":"YouTube Courses - Developer to Developer courses","text":"<p>These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others.</p> <p>There are also some specific videos explaining solutions to set ups other developers may encounter.</p> <ul> <li> <p>HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - https://www.youtube.com/watch?v=QC-JTqQTv2k&amp;list=PLsszRSbzjyvkQwzrJobroRl7z7MfSlePa </p> </li> <li> <p>WP Plugin Boilerplate:  I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent. https://www.youtube.com/watch?v=lJ9ktD4JOfs&amp;list=PLsszRSbzjyvn-RQr4dEjrgnTne2HcJKee</p> </li> </ul>"},{"location":"craig/craig/#volounteering","title":"Volounteering","text":"<p>I volounteer at Codebar.io in Brighton as well as some Community Kitchens.</p>"},{"location":"craig/craig/#outside_interests","title":"Outside interests","text":"<p>These include Community Kitchens, gym, occasional partner dancing and DIY.</p>"},{"location":"craig/cv/","title":"CV","text":"<ul> <li> <p>PythonTestEngineer.co.uk</p> </li> <li> <p>Github CV</p> </li> <li> <p>Github Repo</p> </li> </ul> <p></p> Python Test Engineer - particulalry Django"},{"location":"craig/cv/#python_test_engineer","title":"Python Test Engineer","text":"<ul> <li>Degree in Chemistry, Oxford University.</li> <li>Former A+ PC Technician, Microsoft Certified Systems Engineer and Microsoft Certified SQL Server DBA.</li> <li>Former Business Information Architect.</li> <li>Qualified Accountant Technician and business owner.</li> <li>Experience with REST APIs, GraphQL, React, Vue, Web Components, Node, Docker</li> <li>Talks and workshops given at WordCamps, MeetUps and NDC.</li> </ul>"},{"location":"craig/cv/#talks_and_workshops","title":"Talks and Workshops","text":"<p>A list of talks and workshops I have given: </p> <ul> <li> <p>TALK: Offline and instant websites, aka Progressive Web Apps - AsyncJS, Brighton, September 2021.</p> </li> <li> <p>LIGHTNING TALK: WordPress as a Micro Service to any framework - WordFest, July 2021.</p> </li> <li> <p>TALK: WP REST API and Web Components =&gt; 100% Internet - WordCamp Santa Clarita, July 2021.</p> </li> <li> <p>TALK: Web Components in WP, Gutenberg and as HTML plugins. - WordCamp North East Ohio May 2021.</p> </li> <li> <p>TALK: Leveraging the power or the WordPress REST API - WP Leeds April 2021</p> </li> <li> <p>WORKSHOP: WP REST API and you -&gt; Best Friends Forever workshop (90 mins) - WordCamp Greece April 2021 </p> </li> <li> <p>TALK: Web Components as Micro Apps - NDC London, Jan 2021</p> </li> <li> <p>TALK: Unifying frameworks with Web Components - Brighton AsyncJS, Nov 2020</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshop with NDC</p> </li> <li> <p>WORKSHOP: Web Components Workshop (2hrs) - NDC Oslo June 2020 and a paid training workshope with NDC</p> </li> <li> <p>WORKSHOP: Progressive Web Apps Workshop (2hrs) - Brighton WordUp June 2020</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Denver, June 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API with AJAX Forms and Pages - WordCamp Kent, Ohio May 2020.</p> </li> <li> <p>TALK: What is the WP REST API and how can I use it to make forms and pages that don\u2019t need to do be reloaded? - WordUp Brighton May 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API and AJAX Forms - WordCamp Geneva March 2020 EVENT CANCELLED due to virus concerns </p> </li> <li> <p>TALK - WP-HTML: The marriage of WP and JS Frameworks for expansion, ubiquity and profit - WordCamp Vienna February 2020.</p> </li> <li> <p>WORKSHOP: WordPress REST API - WordCamp Vienna February 2020.</p> </li> <li> <p>TALK: Progressive Web Apps - Brighton WordUp November 2019.</p> </li> <li> <p>TALK: Decoupled WordPress (code along style) - WordCamp Dublin October 2019.</p> </li> <li> <p>TALK: JWT and Authentication - WPHooked London September 2019</p> </li> <li> <p>TALK: Decoupled WordPress and WP Components - WordCamp Brighton August 2019.</p> </li> </ul>"},{"location":"craig/cv/#published_udemy_courses","title":"Published Udemy Courses","text":"<p>Udemy is a great learning platform and having sales at least once a month, courses can be purchased for ~ \u00a315/$15 USD.</p> <p>These have now been retired.</p> <ul> <li>WordPress REST API and AJAX Forms/Pages - DEMO https://www.youtube.com/watch?v=eubhbcGH_Ws&amp;t=6s (paid)</li> <li>Progressive Web Apps - DEMO https://www.youtube.com/watch?v=k_lHvNL0gkw (paid)</li> <li>WP-HTML: decoupling WordPress to any HTML platform using Web Components and the WP REST API. This also enables HTML plugins for non-WP Sites - https://www.udemy.com/course/powerful-html-pages-using-wordpress-component-architecture/ (free)</li> <li>Stylish Dynamic Web Forms with jQuery validation - https://www.udemy.com/course/ready-to-use-form-validation-templates-with-jquery/ (free)</li> </ul>"},{"location":"craig/cv/#youtube_courses_-_developer_to_developer_courses","title":"YouTube Courses - Developer to Developer courses","text":"<p>These are video courses that cover work through official documents to help other developers, learn in public and show prosepective employers not just what I know but how I learn and how I communicate technical matters to others.</p> <p>There are also some specific videos explaining solutions to set ups other developers may encounter.</p> <ul> <li> <p>HIGHLY-FUNCTIONAL-WEBCOMPONENTS: A video course based on the workshop I gave at NDC Oslo June 2020 - https://www.youtube.com/watch?v=QC-JTqQTv2k&amp;list=PLsszRSbzjyvkQwzrJobroRl7z7MfSlePa </p> </li> <li> <p>WP Plugin Boilerplate:  I havea video series to explain WP Plugin Boilerplate using a scaffolded out project that demonstrates the use of MySQL, wp_nonce, REST API, forms and how to redirect pages to plugin templates to make the plugin theme independent. https://www.youtube.com/watch?v=lJ9ktD4JOfs&amp;list=PLsszRSbzjyvn-RQr4dEjrgnTne2HcJKee</p> </li> </ul>"},{"location":"craig/cv/#volounteering","title":"Volounteering","text":"<p>I volounteer at Codebar.io in Brighton as well as some Community Kitchens.</p>"},{"location":"craig/cv/#outside_interests","title":"Outside interests","text":"<p>These include Community Kitchens, gym, occasional partner dancing and DIY.</p>"},{"location":"craig/services/","title":"Services provided","text":""},{"location":"craig/services/#services","title":"Services","text":""},{"location":"craig/services/#testing","title":"Testing","text":""},{"location":"craig/services/#django","title":"Django","text":""},{"location":"craig/services/#engagement_style","title":"Engagement Style","text":""},{"location":"craig/services/#hybrid","title":"Hybrid","text":""},{"location":"db_testing/testing/","title":"Database structural testing","text":"<p>Testing the structural integrity of a database. using SQLModels's <code>inspect</code> feature.</p> <p>SQLModel is a library for interacting with SQL databases from Python code, with Python objects. It is designed to be intuitive, easy to use, highly compatible, and robust.</p> <p>SQLModel is based on Python type annotations, and powered by Pydantic and SQLAlchemy. https://sqlmodel.tiangolo.com/</p> <p>We can get metadata on tables/views to check:</p> <ul> <li>Check tables and views exist.</li> <li>Check foreign keys, defaults, unique constraints, nullability and more.</li> <li>And more...</li> </ul> <p>We will work with an SQLite example but the SQLModel engine feature enables the same code to be used on a variety of databases.</p> <p>TODO</p> <p>Copy model tests from Very FastAPI</p>"},{"location":"django_testing/","title":"Django tesing","text":"<p>There are currently two suites - 05 and 05A</p> <p>05A is based on MDN's tutorial for Django. I have adapted this and add some Bootstrap.</p> <p>It has a nice testing structure of: - test__models - test__views - test__forms</p> <p>(I have seen the use of two underscores after test and I find this more aesthetic.)</p>"},{"location":"django_testing/apps/","title":"Apps","text":"<p>A compilation of various soruces in one project.</p>"},{"location":"django_testing/apps/#accountsposts","title":"accounts/posts","text":"<p>Based on a TDD video series of Django by Ssali Jonathan, I have extended it to include a PyTest folder as well as additional Django Unit Tests.</p>"},{"location":"django_testing/apps/#orm_-_temporarily_removed_as_it_classes_with_new_ecommerce","title":"orm - temporarily removed as it classes with new 'ecommerce'","text":"<p>Based on an ORM Deep Dive series by BugBytes, the code for the 18+ videos was not included in the repo so I have added files for each of the videos. I have also included some of my own ORM scripts as well as others from  Very Academy.</p> <p>It uses django-extensions, django-extensions, which offers the ability to run <code>manage.py runscript &lt;file_name_but_not_py_extension&gt;</code>, as if in a shell.</p> <p>Custom Commands to load data, SQL queries, transactions are also included and I have extended the code to include other useful utilities, as well as some relevant tests.</p> <p>I have added dditional tests from the Django Docs are also included.</p>"},{"location":"django_testing/apps/#ecommerce","title":"ecommerce","text":"<p>Tom Dekan tests - blog and video link https://www.photondesigner.com/articles/unit-tests-factory-boy-faker?ref=yt-unit-tests-factory-boy-faker</p>"},{"location":"django_testing/apps/#filemanager","title":"filemanager","text":"<p>A small app concerned with file uploading and management, this offers some more examples of testing with UnitTest and PyTest.</p>"},{"location":"django_testing/index_django/","title":"Django","text":""},{"location":"django_testing/index_django/#about","title":"About","text":"<p>This has a large selection of tests, many linked to video series.</p>"},{"location":"django_testing/index_django/#todo","title":"TODO","text":"<p>https://developer.mozilla.org/en-US/docs/Learn/Server-side/Django</p> <p>https://github.com/elena/example-tests-django-hypothesis</p> <p>pytest-django</p> <p>bugbytes - middleware and pytest-django:  - https://www.youtube.com/watch?v=TTEEr4N-lKw  - https://www.youtube.com/watch?v=pdatgYDXmSE</p>"},{"location":"django_testing/setup/","title":"Setup","text":""},{"location":"django_testing/setup/#instructions","title":"Instructions","text":"<ul> <li>cd TEST_SUITE_05_DJANGO.</li> <li>creater virtual env <code>python -m venv venv</code>.</li> <li>pip install -r requirents.txt</li> <li>run <code>playwright install</code> to load in playwright browsers.</li> <li>in one terminal run <code>python manage.py runserver</code>.</li> <li>For unittests run <code>python manage.py test</code></li> <li>in another run <code>python -m pytest -v</code> or <code>python -m pytest -v --headed</code> if using  playwright and you want to see browsers. Sometimes this may not work so you will need to add the headless=False to the test.</li> <li>DB has had migrations. superuser: admin password</li> <li>super user is <code>admin</code> and <code>password</code>.</li> <li>pytest-sugar added for fancier terminal output</li> <li>Rich and PyBoxen used for fancy console output. Examples are in the orm app.</li> <li>django-extensions used in orm app so that we can run scripts in a py file rather than in shell. See <code>orm/_NOTES.md</code> for more details - TODO</li> </ul>"},{"location":"django_testing/setup/#alternative","title":"Alternative","text":"<p>If one is not using requirements.txt one would need to install:</p> <ul> <li>django</li> <li>django-extensions for the utuilities used in orm.</li> <li>pytest, pytest-django, pytest-cov.</li> <li>playwright for browser based testing (an then run <code>playrwight install</code> to load browsers).</li> <li>pytest-sugar for nicer output format of tests.</li> <li>pyboxen for fancy console output used in orm.</li> <li>requests for order app.</li> </ul>"},{"location":"django_testing/setup/#references","title":"References","text":"<ul> <li> <p>Pybites - https://www.youtube.com/watch?v=L5jWFU2sVXQ for help with setting up PyTest tests for Django. </p> </li> <li> <p>Ssali Jonathan - https://www.youtube.com/watch?v=Nn3Yjea5KCI&amp;list=PLEt8Tae2spYlVZUBBEE9PtX-NXk_hw7o4 for the TDD approach to building the <code>posts</code> app. This gives a basis for many good tests. I have transported a few for demonstation purposes in <code>pytest_tests</code>. (PyTest searches for all test files with test_ or whatever is specified in the pytest.ini file in root).</p> </li> </ul>"},{"location":"django_testing/setup/#todos","title":"Todos","text":"<p>These will use their own individual app to showcase them.</p> <ul> <li> <p>DjangoStars - https://djangostars.com/blog/django-pytest-testing/</p> </li> <li> <p>https://pytest-with-eric.com/pytest-advanced/pytest-django-restapi-testing/#Conftest-and-Setup</p> </li> <li> <p>https://dev.to/sherlockcodes/pytest-with-django-rest-framework-from-zero-to-hero-8c4</p> </li> </ul>"},{"location":"django_testing/tests/","title":"Tests","text":"<p>These are located within each app under the tests folder. The standard <code>test.py</code> is best deleted otherwise the test runner can get confused and tests won't run.</p> <p>Running <code>python manage.py test</code> will run all the tests. <code>python -m pytest</code> will also run these tests plus any other tests in root tests folder. For clarification, I have called this folder <code>pytest-tests</code>. PyTest searches the whole project for test files.</p>"},{"location":"hypothesis/","title":"About","text":"<p>When writing unit tests, it\u2019s hard to consider all possible edge cases and validate that your code works correctly.</p> <p>This is sometimes caught in production and a quick and speedy patch needs to be deployed. Only for a new bug to emerge later.</p> <p>There will always be cases you didn\u2019t consider, making this an ongoing maintenance job. Unit testing solves only some of these issues.</p> <p>Property-based testing is a complementary approach to traditional unit testing, where test cases are generated based on properties or constriants that the code should satisfy.</p> <p>Hypothesis addresses this limitation by automatically generating test data based on specified strategies.</p> <p>This allows developers to test a much broader range of inputs and outputs than traditional unit tests, increasing the likelihood of catching edge cases and unexpected behaviour.</p> <p>https://github.com/elena/example-tests-django-hypothesis</p> <p>https://www.drmaciver.com/2015/06/hypothesis-for-django/</p> <p>https://www.agiliq.com/blog/2019/01/hypothesis-in-drf/</p> <p>https://www.youtube.com/watch?v=7It3sIrTAVo</p> <p>https://www.slideshare.net/slideshow/hypothesis-randomised-testing-for-django/58357011</p> <p>https://github.com/HypothesisWorks/hypothesis/blob/master/hypothesis-python/examples/test_basic.py</p> <p>Hypothesis PyPi</p> <p>Pytest-with-Eric is  a very good resource.</p>"},{"location":"hypothesis/hypothesis/","title":"Hypothesis","text":"<p>When writing unit tests, it\u2019s hard to consider all possible edge cases and validate that your code works correctly.</p> <p>This is sometimes caught in production and a quick and speedy patch needs to be deployed. Only for a new bug to emerge later.</p> <p>There will always be cases you didn\u2019t consider, making this an ongoing maintenance job. Unit testing solves only some of these issues.</p> <p>Property-based testing is a complementary approach to traditional unit testing, where test cases are generated based on properties or constriants that the code should satisfy.</p> <p>Hypothesis addresses this limitation by automatically generating test data based on specified strategies.</p> <p>This allows developers to test a much broader range of inputs and outputs than traditional unit tests, increasing the likelihood of catching edge cases and unexpected behaviour.</p> <p>https://github.com/elena/example-tests-django-hypothesis</p> <p>https://www.drmaciver.com/2015/06/hypothesis-for-django/</p> <p>https://www.agiliq.com/blog/2019/01/hypothesis-in-drf/</p> <p>https://www.youtube.com/watch?v=7It3sIrTAVo</p> <p>https://www.slideshare.net/slideshow/hypothesis-randomised-testing-for-django/58357011</p> <p>https://github.com/HypothesisWorks/hypothesis/blob/master/hypothesis-python/examples/test_basic.py</p> <p>Hypothesis PyPi</p> <p>Pytest-with-Eric is  a very good resource.</p>"},{"location":"hypothesis/syntax_highlighting_demo/","title":"Syntax highlighting demo","text":"<p>Hypothesis Testing</p>"},{"location":"hypothesis/syntax_highlighting_demo/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"hypothesis/syntax_highlighting_demo/#bash","title":"Bash","text":"<pre><code># Minimal makefile for Sphinx documentation\n#\n\n# You can set these variables from the command line, and also\n# from the environment for the first two.\nSPHINXOPTS    ?=\nSPHINXBUILD   ?= sphinx-build\nSOURCEDIR     = source\nBUILDDIR      = build\n\n# Put it first so that \"make\" without argument is like \"make help\".\nhelp:\n    @$(SPHINXBUILD) -M help \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O)\n\n.PHONY: help Makefile\n\n# Catch-all target: route all unknown targets to Sphinx using the new\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n%: Makefile\n    @$(SPHINXBUILD) -M $@ \"$(SOURCEDIR)\" \"$(BUILDDIR)\" $(SPHINXOPTS) $(O)\n</code></pre>"},{"location":"hypothesis/syntax_highlighting_demo/#syntax_highlighting_example","title":"Syntax highlighting Example","text":"<pre><code>import flask\nimport flask_saml\n\napp = flask.Flask(__name__)\n\napp.config.update({\n    'SECRET_KEY': 'soverysecret',\n    'SAML_METADATA_URL': 'https://mymetadata.xml',\n})\nflask_saml.FlaskSAML(app)\n</code></pre>"},{"location":"hypothesis/syntax_highlighting_demo/#sample_layout","title":"Sample layout","text":"<pre><code>\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 about.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n\u2514\u2500\u2500 site\n    \u251c\u2500\u2500 404.html\n    \u251c\u2500\u2500 about\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 search_index.json\n    \u251c\u2500\u2500 sitemap.xml\n    \u2514\u2500\u2500 sitemap.xml.gz\n</code></pre>"},{"location":"playwright_api/","title":"Playwright Testing","text":""},{"location":"playwright_api/#about","title":"About","text":"<p>Playwright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation.</p> <p>Playwright recommends using the official Playwright Pytest plugin to write end-to-end tests. It provides context isolation, running it on multiple browser configurations out of the box. Alternatively you can use the library to manually write the testing infrastructure with your preferred test-runner. The Pytest plugin utilizes the sync version of Playwright, there is also an async version accessible via the library.</p> <p>Playwright - Python</p>"},{"location":"playwright_api/#install","title":"Install","text":"<ul> <li>move to <code>TEST_SUITE_02_API_PLAYWRIGHT</code> </li> <li>create virtual environment as you wish</li> <li>run <code>pip install requirements_02.txt</code></li> <li>run <code>playwright install</code> to load in browsers. IMPORTANT.</li> </ul>"},{"location":"playwright_api/#run_tests","title":"Run Tests","text":"<ul> <li>run <code>python -m pytest -vs</code></li> </ul>"},{"location":"playwright_api/api/","title":"Hosting and Deployment","text":""},{"location":"playwright_api/api/#github_pages_and_github","title":"GitHub Pages and GitHub","text":"<ul> <li>Host source code on GitHub.</li> <li>Build and deploy with:<ul> <li><code>mkdocs gh-deploy</code></li> <li>GitHub Actions</li> </ul> </li> </ul>"},{"location":"playwright_api/api/#gitlab_pages_and_gitlab","title":"GitLab Pages and GitLab","text":"<ul> <li>Host source code on GitLab.</li> <li>Build and deploy with GitLab CI/CD.</li> </ul>"},{"location":"playwright_api/api/#netlify","title":"Netlify","text":"<p>Host source code on:</p> <ul> <li>GitHub</li> <li>GitLab</li> <li>BitBucket</li> </ul> <p>Build and deploy with Netlify.</p>"},{"location":"playwright_api/api/#aws_amplify_console","title":"AWS Amplify Console","text":"<p>Host source code on:</p> <ul> <li>GitHub</li> <li>GitLab</li> <li>BitBucket</li> <li>AWS CodeCommit</li> </ul> <p>Build and deploy with AWS Amplify Console.</p>"},{"location":"playwright_api/playwright/","title":"Playwright Testing","text":""},{"location":"playwright_api/playwright/#about","title":"About","text":"<p>Playwright was created specifically to accommodate the needs of end-to-end testing. Playwright supports all modern rendering engines including Chromium, WebKit, and Firefox. Test on Windows, Linux, and macOS, locally or on CI, headless or headed with native mobile emulation.</p> <p>Playwright recommends using the official Playwright Pytest plugin to write end-to-end tests. It provides context isolation, running it on multiple browser configurations out of the box. Alternatively you can use the library to manually write the testing infrastructure with your preferred test-runner. The Pytest plugin utilizes the sync version of Playwright, there is also an async version accessible via the library.</p> <p>Playwright - Python</p>"},{"location":"playwright_api/playwright/#install","title":"Install","text":"<ul> <li>move to <code>TEST_SUITE_02_API_PLAYWRIGHT</code> </li> <li>create virtual environment as you wish</li> <li>run <code>pip install requirements_02.txt</code></li> <li>run <code>playwright install</code> to load in browsers. IMPORTANT.</li> </ul>"},{"location":"playwright_api/playwright/#run_tests","title":"Run Tests","text":"<ul> <li>run <code>python -m pytest -vs</code></li> </ul>"},{"location":"playwright_api/testing_playgrounds/","title":"Testing Playgrounds","text":"<ul> <li>AutomationStore</li> </ul>"},{"location":"pytest/","title":"PyTest","text":""},{"location":"pytest/#purpose_of_this_book","title":"Purpose of this book","text":"<p>To provide a range of ready congfigured PYTHON TEST FRAMEWORKS with a 'one step install', comprising of templates and references for developers to adapt to their own needs.</p> <p>To provide curated resources of articles, videos and books that I have found useful.</p> <p>Frameworks, apps and folders may well have additional README.md files to give more detailed instructions. ker(pytest.mark.unit)         if \"unit_schema\" in item.name:             item.add_marker(pytest.mark.unit_schema)</p>"},{"location":"pytest/pytest/","title":"PyTest - TEST_SUITE_01","text":""},{"location":"pytest/pytest/#about","title":"About","text":"<p>This has a large selection of tests, many linked to video series.</p>"},{"location":"pytest/pytest/#tutorials","title":"Tutorials","text":"<ul> <li>01_check_set_up to test wiring between src and tests folders.</li> <li>02_py_coffee is a very good series from CoffeeBeforeArch. The code samples are wired in here.</li> <li>03_indian_pythonista is another good series and most of the code samples are included. Indian Pythonista.</li> <li>04 not included</li> <li>05_mocks_patch contains a range of templates for mocking and patching. Acknowledgements and links included.</li> <li>06_async has some templates for async testing</li> </ul>"},{"location":"pytest/pytest/#install","title":"Install","text":"<ul> <li>move to <code>TEST_SUITE_01</code> </li> <li>create virtual environment as you wish</li> <li>run <code>pip install requirements_01.txt</code></li> </ul>"},{"location":"pytest/pytest/#run_tests","title":"Run Tests","text":"<ul> <li>run <code>python -m pytest -vs</code></li> </ul>"},{"location":"pytest/pytest_basic/","title":"PyTest Basic","text":""},{"location":"pytest/pytest_basic/#set_up","title":"Set up","text":"<p>This uses TEST_SUITE_00 and is a simple wiring of src folder for your code and an tests folder for PyTest.</p> <p></p> <p>There is custom logging defined in pytest.ini that outputs to a <code>log</code> folder.</p> <ul> <li>move to <code>TEST_SUITE_00</code> folder and  <pre><code>pip install -r requirements_00.txt\n</code></pre></li> </ul>"},{"location":"pytest/pytest_basic/#sample_layout","title":"Sample layout","text":"<pre><code>\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 about.md\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 mkdocs.yml\n\u2514\u2500\u2500 site\n    \u251c\u2500\u2500 404.html\n    \u251c\u2500\u2500 about\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 search_index.json\n    \u251c\u2500\u2500 sitemap.xml\n    \u2514\u2500\u2500 sitemap.xml.gz\n</code></pre>"},{"location":"pytest/pytest_basic/#tests","title":"Tests","text":"<p>pytest-sugar has been installed to provide prettier console output.</p> <pre><code>python -m pytest \n\npython -m pytest -vs\n</code></pre> <p>\ud83d\udc49 Click me to download zip</p>"},{"location":"resources/articles/","title":"Articles","text":"<p>A list of resources I have found useful.</p>"},{"location":"resources/books/","title":"Books","text":"<p>A list of resources I have found useful.</p>"},{"location":"resources/videos/","title":"Videos","text":"<p>A list of resources I have found useful.</p>"}]}